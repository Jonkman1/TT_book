[
  {
    "objectID": "01_TT_202201.html",
    "href": "01_TT_202201.html",
    "title": "2  Exploration and vizualization of Starbuck coffee use",
    "section": "",
    "text": "3 Load data\nThe data are loaded directly from the TidyTuesday github page.\nHere are some explorative commands you can use:\n- star-df opens the dataset and shows you the variables. - names(star_df)gives you the names of the 15 variables. - glimpse(star_df)shows you the number of rows (often particpants) and columns (often variables) and also informs you about the kind of variables. - dim(star_df) informs you about number of rows and columns.\n- sum(is.na(star_df)) show you the number of missing variables.\nWhen you want to look at a specific subset with the product_name brewed coffee for example you can define this as:.\nCan you plot between calories(y) and total_fat_g (x)? Show the diffence on whip_char'and show it for the sixmilk-labs` you recoded.\nSave the plot on your computer as a png-file. Here is place in a projectmap and a submap images which I made on my computer. Change the path if necessary for your computer.\nFor counting frequencies you always can use different methods. We show some of them.\nThis is the R base-way for counting the variable whipfor example.\nThis is the grouping-way.\nThis is a better way (thanks Wim!).\nHere we do some basic cleaning. We select six variables and look only at variables of which the size is grande. We call this dataset star_clean.\nLet us plot it on different ways.The first three are similar.\nThen we plot the coffee of which the whipis 1.\nFor the next plot we first change the class of the variable milk into a character variable and save it as a different dataset.\nWe plot this new dataset on three different ways."
  },
  {
    "objectID": "01_TT_202201.html#introduction",
    "href": "01_TT_202201.html#introduction",
    "title": "2  Exploration and vizualization of Starbuck coffee use",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\nOn 11 January 2022 and 25 January 2022 Sam Langton gave NSCR Tidy Tuesday presentations on the exploration and visualization of Starbuck coffee use data.In this document both presentations are combined.\n[^1]. Here you can find it on the NSCR- website. Here is the First presentation. Here is the Second presentation"
  },
  {
    "objectID": "01_TT_202201.html#load-libraries.",
    "href": "01_TT_202201.html#load-libraries.",
    "title": "2  Exploration and vizualization of Starbuck coffee use",
    "section": "2.2 Load libraries.",
    "text": "2.2 Load libraries.\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TT_book",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "09_TT_202211.html",
    "href": "09_TT_202211.html",
    "title": "3  Student mobility in Europe",
    "section": "",
    "text": "4 Introduction\nIn this workshop, Wim Bernasco explores a Tidy Tuesday dataset about the European Union Erasmus+ student mobility program. This dataset was used in the main Tidy Tuesday of week 10 in 2022. For more information on this data, including the codebook, see the RForDataScience GitHub registry.\nIn this workshop, the focus is on exploring, analyzing, and maybe visualizing student streams between countries. Different descriptive questions will be answered:\nHere you find the link to the NSC-R Tidy Tuesday page.\n\n\n5 Get started\nInstall uninstalled packages tidyverse, here and tidytuesdayR.\n\nif (! require(\"tidyverse\")) install.packages(\n  pkgs = \"tidyverse\", repos = \"http://cran.us.r-project.org\"\n)\n\n\n  There is a binary version available but the source version is later:\n       binary source needs_compilation\ngargle  1.2.1  1.3.0             FALSE\n\npackage 'ps' successfully unpacked and MD5 sums checked\npackage 'rematch' successfully unpacked and MD5 sums checked\npackage 'processx' successfully unpacked and MD5 sums checked\npackage 'backports' successfully unpacked and MD5 sums checked\npackage 'assertthat' successfully unpacked and MD5 sums checked\npackage 'blob' successfully unpacked and MD5 sums checked\npackage 'DBI' successfully unpacked and MD5 sums checked\npackage 'data.table' successfully unpacked and MD5 sums checked\npackage 'uuid' successfully unpacked and MD5 sums checked\npackage 'cellranger' successfully unpacked and MD5 sums checked\npackage 'ids' successfully unpacked and MD5 sums checked\npackage 'rematch2' successfully unpacked and MD5 sums checked\npackage 'timechange' successfully unpacked and MD5 sums checked\npackage 'callr' successfully unpacked and MD5 sums checked\npackage 'selectr' successfully unpacked and MD5 sums checked\npackage 'broom' successfully unpacked and MD5 sums checked\npackage 'dbplyr' successfully unpacked and MD5 sums checked\npackage 'dtplyr' successfully unpacked and MD5 sums checked\npackage 'forcats' successfully unpacked and MD5 sums checked\npackage 'googledrive' successfully unpacked and MD5 sums checked\npackage 'googlesheets4' successfully unpacked and MD5 sums checked\npackage 'haven' successfully unpacked and MD5 sums checked\npackage 'lubridate' successfully unpacked and MD5 sums checked\npackage 'modelr' successfully unpacked and MD5 sums checked\npackage 'readxl' successfully unpacked and MD5 sums checked\npackage 'reprex' successfully unpacked and MD5 sums checked\npackage 'rvest' successfully unpacked and MD5 sums checked\npackage 'xml2' successfully unpacked and MD5 sums checked\npackage 'tidyverse' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"here\")) install.packages(\n  pkgs = \"here\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'here' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"tidytuesdayR\")) install.packages(\n  pkgs = \"tidytuesdayR\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'tidytuesdayR' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"broom\")) install.packages(\n  pkgs = \"broom\", repos = \"http://cran.us.r-project.org\"\n)\nif (! require(\"circlize\")) install.packages(\n  pkgs = \"circlize\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'GlobalOptions' successfully unpacked and MD5 sums checked\npackage 'shape' successfully unpacked and MD5 sums checked\npackage 'circlize' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"igraph\")) install.packages(\n  pkgs = \"igraph\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'igraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\n\nLoad the required libraries\n\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(here)\nlibrary(tidytuesdayR)\nlibrary(circlize)\nlibrary(igraph)\n\nLoad the datafile For information see\n\n\n\n\n\n\nNote\n\n\n\nThe ‘participants’ field is a frequency weight!\n\n\nOpen the dataset\n\ntuesdata <- tt_load(2022, week = 10)\n\n--- Compiling #TidyTuesday Information for 2022-03-08 ----\n\n\n--- There is 1 file available ---\n\n\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `erasmus.csv`\n\n\n--- Download complete ---\n\nerasmus <- tuesdata$erasmus\n\nThere are two additional ‘helper’ datafiles used used in this script: country_names.csv: The full names and EU-status of the countries adjacency.csv : Pairs of countries that are adjacent (share borders)\nI will address some of the following descriptive questions:\n- How many students studied abroad?\n- What are the top-10 receiving countries?\n- What are the top-10 sending countries?\n- Which are the 10 most frequent origin-destination country combinations?\n- Are reverse flows (the flow from A to B and the flow from B to A) correlated?\nThe following modeling questions will be answered:\n- How does total number of students from country A to country B depend on the total number of student from A and the total number of students from B?\n- Do adjacent countries attract more or less students than non-adjacent countries?\nIf time permits some visualization questions will be answered:\n- Are there some ways of visualizing mobility data?\n\n\n6 Exploration and preparation\nFirst we explore the data:\n\nerasmus |> names()\n\n [1] \"project_reference\"                   \"academic_year\"                      \n [3] \"mobility_start_month\"                \"mobility_end_month\"                 \n [5] \"mobility_duration\"                   \"activity_mob\"                       \n [7] \"field_of_education\"                  \"participant_nationality\"            \n [9] \"education_level\"                     \"participant_gender\"                 \n[11] \"participant_profile\"                 \"special_needs\"                      \n[13] \"fewer_opportunities\"                 \"group_leader\"                       \n[15] \"participant_age\"                     \"sending_country_code\"               \n[17] \"sending_city\"                        \"sending_organization\"               \n[19] \"sending_organisation_erasmus_code\"   \"receiving_country_code\"             \n[21] \"receiving_city\"                      \"receiving_organization\"             \n[23] \"receiving_organisation_erasmus_code\" \"participants\"                       \n\nerasmus |> glimpse()\n\nRows: 164,635\nColumns: 24\n$ project_reference                   <chr> \"2014-1-AT02-KA347-000139\", \"2014-~\n$ academic_year                       <chr> \"2014-2015\", \"2014-2015\", \"2014-20~\n$ mobility_start_month                <chr> \"2014-11\", \"2014-11\", \"2014-11\", \"~\n$ mobility_end_month                  <chr> \"2014-11\", \"2014-11\", \"2014-11\", \"~\n$ mobility_duration                   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n$ activity_mob                        <chr> \"National youth meetings\", \"Nation~\n$ field_of_education                  <chr> \"? Unknown ?\", \"? Unknown ?\", \"? U~\n$ participant_nationality             <chr> \"AT\", \"AT\", \"AT\", \"AT\", \"AT\", \"AT\"~\n$ education_level                     <chr> \"??? - ? Unknown ?\", \"??? - ? Unkn~\n$ participant_gender                  <chr> \"Female\", \"Female\", \"Female\", \"Mal~\n$ participant_profile                 <chr> \"Learner\", \"Learner\", \"Learner\", \"~\n$ special_needs                       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"~\n$ fewer_opportunities                 <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\",~\n$ group_leader                        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"~\n$ participant_age                     <dbl> 13, 14, 15, 14, 15, 15, 16, 17, 18~\n$ sending_country_code                <chr> \"AT\", \"AT\", \"AT\", \"AT\", \"AT\", \"AT\"~\n$ sending_city                        <chr> \"Dornbirn\", \"Dornbirn\", \"Dornbirn\"~\n$ sending_organization                <chr> \"bOJA - Bundesweites Netzwerk Offe~\n$ sending_organisation_erasmus_code   <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\",~\n$ receiving_country_code              <chr> \"AT\", \"AT\", \"AT\", \"AT\", \"AT\", \"AT\"~\n$ receiving_city                      <chr> \"Dornbirn\", \"Dornbirn\", \"Dornbirn\"~\n$ receiving_organization              <chr> \"bOJA - Bundesweites Netzwerk Offe~\n$ receiving_organisation_erasmus_code <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\",~\n$ participants                        <dbl> 2, 3, 3, 4, 2, 2, 1, 3, 1, 2, 1, 2~\n\nerasmus |> count(participants)\n\n# A tibble: 99 x 2\n   participants      n\n          <dbl>  <int>\n 1            1 118352\n 2            2  22804\n 3            3   8756\n 4            4   4642\n 5            5   2572\n 6            6   1775\n 7            7   1125\n 8            8    874\n 9            9    668\n10           10    502\n# ... with 89 more rows\n\n\nFirst check number of rows\n\nerasmus |> dim()\n\n[1] 164635     24\n\n\nNumber of rows after ‘expansion’. Expansion expands a frequency-weighted datafile to a regular file where each row represents a single student exchange trip.\n\nerasmus |> \n  uncount(participants) |>\n  dim()\n\n[1] 309751     23\n\n\nFrom which countries do participants come?\n\nerasmus |> \n  count(sending_country_code)\n\n# A tibble: 54 x 2\n   sending_country_code     n\n   <chr>                <int>\n 1 AL                     132\n 2 AM                     127\n 3 AT                    3484\n 4 AZ                      54\n 5 BA                      83\n 6 BE                    3279\n 7 BG                    4412\n 8 BY                      69\n 9 CY                    1886\n10 CZ                    6086\n# ... with 44 more rows\n\n\nTo which country do participants go?\n\nerasmus |>\n  count(receiving_country_code)\n\n# A tibble: 34 x 2\n   receiving_country_code     n\n   <chr>                  <int>\n 1 AT                      3451\n 2 BE                      4008\n 3 BG                      4120\n 4 CY                      1981\n 5 CZ                      6107\n 6 DE                     17000\n 7 DK                      1484\n 8 EE                      3637\n 9 EL                      2042\n10 ES                     11188\n# ... with 24 more rows\n\n\nAdd names to the codes. There are several options to do this. - Option 1: Explicit in-script recoding\n\nerasmus |>\n  mutate(sending_country_name =\n           case_when(sending_country_code == \"AT\" ~ \"Austria\",\n                     sending_country_code == \"BE\" ~ \"Belgium\",\n                     sending_country_code == \"BG\" ~ \"Bulgaria\",\n                     sending_country_code == \"CY\" ~ \"Cyprus\",\n                     sending_country_code == \"CZ\" ~ \"Czechia\",\n                     sending_country_code == \"DE\" ~ \"Germany\",\n                     sending_country_code == \"DK\" ~ \"Denkmark\"\n                     # .........\n           )) |>\n  count(sending_country_name)\n\n# A tibble: 8 x 2\n  sending_country_name      n\n  <chr>                 <int>\n1 Austria                3484\n2 Belgium                3279\n3 Bulgaria               4412\n4 Cyprus                 1886\n5 Czechia                6086\n6 Denkmark               1426\n7 Germany               17155\n8 <NA>                 126907\n\n\n\nOption 2: Join with look-up table in a separate CSV file\n\n\ncountry_labels <- read_csv(here(\"C:/Users/Gebruiker/Desktop/TidyTuesday/TT_20221115/country_names.csv\"))\n\nRows: 37 Columns: 3\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): country_name, country_code, country_status\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nerasmus |>\n  left_join(country_labels, \n            by=c(\"receiving_country_code\" = \"country_code\")) |>\n  rename(receiving_country_name = country_name,\n         receiving_country_status = country_status)\n\n# A tibble: 164,635 x 26\n   project_ref~1 acade~2 mobil~3 mobil~4 mobil~5 activ~6 field~7 parti~8 educa~9\n   <chr>         <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   <chr>  \n 1 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 2 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 3 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 4 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 5 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 6 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n 7 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n 8 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n 9 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n10 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n# ... with 164,625 more rows, 17 more variables: participant_gender <chr>,\n#   participant_profile <chr>, special_needs <chr>, fewer_opportunities <chr>,\n#   group_leader <chr>, participant_age <dbl>, sending_country_code <chr>,\n#   sending_city <chr>, sending_organization <chr>,\n#   sending_organisation_erasmus_code <chr>, receiving_country_code <chr>,\n#   receiving_city <chr>, receiving_organization <chr>,\n#   receiving_organisation_erasmus_code <chr>, participants <dbl>, ...\n\n\nCombining some of the above transformations we created a clean file\n\nlabeled_erasmus_full <- \n  erasmus |>\n  # Keep only a subset of columns/variables\n  select(sending_country_code, receiving_country_code, \n         participant_gender, academic_year, activity_mob, participants) |>\n  # insert names of receiving countries by linking to country codes\n  left_join(country_labels, \n            by=c(\"receiving_country_code\" = \"country_code\")) |>\n  # make sure the column names are clear \n  rename(receiving_country_name = country_name,\n         receiving_country_status = country_status) |> \n  # insert names of sending countries by linking to country codes\n  left_join(country_labels, \n            by=c(\"sending_country_code\" = \"country_code\")) |>\n  # make sure the column names are clear \n  rename(sending_country_name = country_name,\n         sending_country_status = country_status) |> \n  # exclude countries outside EU and with no affiliation to EU\n  filter(sending_country_status %in% c(\"EU\", \"EFTA\", \"UK\", \"Candidate\"),\n         receiving_country_status %in% c(\"EU\", \"EFTA\", \"UK\", \"Candidate\")) |>\n  # exclude the (many!) within-country exchanges\n  filter(sending_country_code != receiving_country_code) |>\n  # Only international mobility program\n  filter(activity_mob == \"Transnational youth meetings\") |>\n  # Every row becomes an individual international student trip \n  uncount(participants) \n\n\n\n7 Descriptive questions\nHow many students are there?\n\nlabeled_erasmus_full |>\n  dim()\n\n[1] 15693     9\n\n\nWhere did they come from?\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>\n  print(n=Inf)\n\n# A tibble: 36 x 2\n   sending_country_name     n\n   <chr>                <int>\n 1 Albania                169\n 2 Austria                565\n 3 Belgium                662\n 4 Bulgaria               526\n 5 Croatia                323\n 6 Cyprus                 121\n 7 Czechia                531\n 8 Denmark                296\n 9 Estonia                292\n10 Finland                307\n11 France                 622\n12 Germany               1314\n13 Greece                 483\n14 Hungary                473\n15 Iceland                 25\n16 Ireland                225\n17 Italy                 1098\n18 Latvia                 386\n19 Liechtenstein            6\n20 Lithuania              411\n21 Luxembourg             166\n22 Malta                   58\n23 Montenegro              27\n24 Netherlands            630\n25 North Macedonia        185\n26 Norway                 133\n27 Poland                 837\n28 Portugal               468\n29 Romania                745\n30 Serbia                 343\n31 Slovakia               370\n32 Slovenia               268\n33 Spain                  819\n34 Sweden                 495\n35 Turkey                 553\n36 United Kingdom         761\n\n\nVisualization as a bar graph\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>  \n  ggplot() + \n  geom_col(aes(x=sending_country_name, y=n))\n\n\n\n\nWhere do students come from, horizontal\n\n\n\n\nWith vertical labels labels\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>  \n  ggplot() + \n  geom_col(aes(x=sending_country_name, y=n)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nWhere do students come from, vertical\n\n\n\n\nOrder by frequency.\n\nlabeled_erasmus_full |> \n  count(sending_country_code) |>  \n  arrange(-n) |>\n    # Converting character variable to factor variable\n    mutate(sending_country_code=factor(sending_country_code,\n                                     levels = unique(sending_country_code),\n                                     ordered = T)) |>\n  ggplot() + \n  geom_col(aes(x=sending_country_code, y=n)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nWhere do students come from, ordered\n\n\n\n\nWhere did they go to?\n\nlabeled_erasmus_full |> \n  count(receiving_country_name) |>\n  arrange(-n) |>\n  print(n=Inf)\n\n# A tibble: 31 x 2\n   receiving_country_name     n\n   <chr>                  <int>\n 1 France                  2403\n 2 Belgium                 1428\n 3 Spain                   1204\n 4 Germany                 1095\n 5 Italy                   1017\n 6 Netherlands              765\n 7 Luxembourg               607\n 8 Estonia                  524\n 9 Czechia                  518\n10 Lithuania                495\n11 Austria                  485\n12 United Kingdom           483\n13 Greece                   444\n14 Romania                  423\n15 Turkey                   371\n16 Slovenia                 355\n17 Croatia                  343\n18 Denmark                  340\n19 Poland                   340\n20 Portugal                 296\n21 Norway                   286\n22 Sweden                   250\n23 Cyprus                   214\n24 Ireland                  186\n25 Latvia                   165\n26 Malta                    163\n27 Bulgaria                 149\n28 Hungary                  116\n29 North Macedonia          111\n30 Slovakia                  67\n31 Finland                   50\n\n\n\nlabeled_erasmus_full |> \n  count(receiving_country_name) |>\n  arrange(-n) |>\n  print(n=Inf)\n\n# A tibble: 31 x 2\n   receiving_country_name     n\n   <chr>                  <int>\n 1 France                  2403\n 2 Belgium                 1428\n 3 Spain                   1204\n 4 Germany                 1095\n 5 Italy                   1017\n 6 Netherlands              765\n 7 Luxembourg               607\n 8 Estonia                  524\n 9 Czechia                  518\n10 Lithuania                495\n11 Austria                  485\n12 United Kingdom           483\n13 Greece                   444\n14 Romania                  423\n15 Turkey                   371\n16 Slovenia                 355\n17 Croatia                  343\n18 Denmark                  340\n19 Poland                   340\n20 Portugal                 296\n21 Norway                   286\n22 Sweden                   250\n23 Cyprus                   214\n24 Ireland                  186\n25 Latvia                   165\n26 Malta                    163\n27 Bulgaria                 149\n28 Hungary                  116\n29 North Macedonia          111\n30 Slovakia                  67\n31 Finland                   50\n\n\nLet us visualise this also, vertical and ordered.\n\nlabeled_erasmus_full |> \n  count(receiving_country_code) |>  \n  arrange(-n) |>\n  mutate(receiving_country_code=factor(receiving_country_code,\n                                       levels = unique(receiving_country_code),\n                                       ordered = T)) |>\n  ggplot() + \n  geom_col(aes(x=receiving_country_code, y=n)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nHow many students do countries receive, ordered\n\n\n\n\nTop 10 Where did they go to.\n\nlabeled_erasmus_full |> \n  count(receiving_country_name) |>\n  arrange(-n) |> \n  head(n=10)\n\n# A tibble: 10 x 2\n   receiving_country_name     n\n   <chr>                  <int>\n 1 France                  2403\n 2 Belgium                 1428\n 3 Spain                   1204\n 4 Germany                 1095\n 5 Italy                   1017\n 6 Netherlands              765\n 7 Luxembourg               607\n 8 Estonia                  524\n 9 Czechia                  518\n10 Lithuania                495\n\n\nTop 10 Where did they come from\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>\n  arrange(-n) |> \n  head(n=10)\n\n# A tibble: 10 x 2\n   sending_country_name     n\n   <chr>                <int>\n 1 Germany               1314\n 2 Italy                 1098\n 3 Poland                 837\n 4 Spain                  819\n 5 United Kingdom         761\n 6 Romania                745\n 7 Belgium                662\n 8 Netherlands            630\n 9 France                 622\n10 Austria                565\n\n\nTop 10 origin-destination combinations\n\nlabeled_erasmus_full |> \n  count(sending_country_name, receiving_country_name) |>\n  arrange(-n) |> \n  head(n=10)\n\n# A tibble: 10 x 3\n   sending_country_name receiving_country_name     n\n   <chr>                <chr>                  <int>\n 1 Germany              France                   305\n 2 Italy                France                   268\n 3 Germany              Belgium                  235\n 4 Belgium              France                   198\n 5 Italy                Spain                    170\n 6 Spain                France                   149\n 7 United Kingdom       France                   131\n 8 Spain                Italy                    123\n 9 Poland               France                   122\n10 France               Belgium                  120\n\n\n# Intermezzo \n(Cartesian product = cross-product = all combinations) \n\nTiny dataset of team members\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_members <- tibble(name = c( \"Alex\", \"Asier\", \"Franziska\", \"Sam\", \"Wim\")) \n# Tiny datset of available days\nsessions <- tibble(day = c(\"Monday\", \"Tuesday\", \"Thursday\"))\n:::\nMake all combinations of team members and available days\n\nfull_join(team_members, sessions, by = as.character())\n\nWarning: Using `by = character()` to perform a cross join was deprecated in dplyr 1.1.0.\ni Please use `cross_join()` instead.\n\n\n# A tibble: 15 x 2\n   name      day     \n   <chr>     <chr>   \n 1 Alex      Monday  \n 2 Alex      Tuesday \n 3 Alex      Thursday\n 4 Asier     Monday  \n 5 Asier     Tuesday \n 6 Asier     Thursday\n 7 Franziska Monday  \n 8 Franziska Tuesday \n 9 Franziska Thursday\n10 Sam       Monday  \n11 Sam       Tuesday \n12 Sam       Thursday\n13 Wim       Monday  \n14 Wim       Tuesday \n15 Wim       Thursday\n\n\nSame results, but more transparent code.\n\n\nthanks to Nick van Doormaal for this suggestion\n\nexpand_grid(team_members, sessions)\n\n# A tibble: 15 x 2\n   name      day     \n   <chr>     <chr>   \n 1 Alex      Monday  \n 2 Alex      Tuesday \n 3 Alex      Thursday\n 4 Asier     Monday  \n 5 Asier     Tuesday \n 6 Asier     Thursday\n 7 Franziska Monday  \n 8 Franziska Tuesday \n 9 Franziska Thursday\n10 Sam       Monday  \n11 Sam       Tuesday \n12 Sam       Thursday\n13 Wim       Monday  \n14 Wim       Tuesday \n15 Wim       Thursday\n\nfull_join(team_members, team_members, by = as.character()) |>\n  filter(name.x != name.y)\n\n# A tibble: 20 x 2\n   name.x    name.y   \n   <chr>     <chr>    \n 1 Alex      Asier    \n 2 Alex      Franziska\n 3 Alex      Sam      \n 4 Alex      Wim      \n 5 Asier     Alex     \n 6 Asier     Franziska\n 7 Asier     Sam      \n 8 Asier     Wim      \n 9 Franziska Alex     \n10 Franziska Asier    \n11 Franziska Sam      \n12 Franziska Wim      \n13 Sam       Alex     \n14 Sam       Asier    \n15 Sam       Franziska\n16 Sam       Wim      \n17 Wim       Alex     \n18 Wim       Asier    \n19 Wim       Franziska\n20 Wim       Sam      \n\n\n\nCreate all possible combinations of sending and receiving country names.\n\n::: {.cell}\n\n```{.r .cell-code}\npossible_mobility_names <- \n  full_join(country_labels, country_labels,\n            by = as.character()) |>\n  select(sending_country_name   = country_name.x,\n         receiving_country_name = country_name.y,\n         sending_country_code   = country_code.x,\n         receiving_country_code = country_code.y) |>\n  filter(sending_country_name != receiving_country_name)\n:::\nErasmus student mobility flows including zero flows\n\nflows_erasmus_full_zeros <-\n  labeled_erasmus_full |> \n  group_by(sending_country_name, receiving_country_name) |>\n  # Origin, destination, count\n  count() |>\n  rename(exchanges = n) |>\n  # join with all combinations to include zero-flow pairs\n  right_join(possible_mobility_names) |> \n  # change the NAs (= zero-flow) into 0\n  replace_na(list(exchanges=0))\n\nJoining with `by = join_by(sending_country_name, receiving_country_name)`\n\n\nNumber of exchanges frequencies reversed: 581 zero flows, 37 1-person flow\n\nflows_erasmus_full_zeros |>\n  ungroup() |>\n  count(exchanges) |>\n  arrange(exchanges) |>\n  print(n=40)\n\n# A tibble: 98 x 2\n   exchanges     n\n       <int> <int>\n 1         0   581\n 2         1    37\n 3         2    37\n 4         3    48\n 5         4    35\n 6         5    42\n 7         6    30\n 8         7    32\n 9         8    29\n10         9    19\n11        10    28\n12        11    20\n13        12    27\n14        13    14\n15        14    18\n16        15    20\n17        16    15\n18        17    15\n19        18    13\n20        19    15\n21        20    16\n22        21    10\n23        22    13\n24        23    14\n25        24     9\n26        25    13\n27        26     7\n28        27     7\n29        28     7\n30        29    13\n31        30     8\n32        31     9\n33        32     4\n34        33     7\n35        34     4\n36        35     4\n37        36     6\n38        37     6\n39        38     4\n40        39     3\n# ... with 58 more rows\n\n\nLet us make a histogram of this distribution\n\nflows_erasmus_full_zeros |>\n  ggplot() +\n  geom_histogram(aes(x=exchanges), binwidth = 5)\n\n\n\n\nHistogram of student mobility flow\n\n\n\n\n\nreverse_flows_erasmus_full_zeros <-\n  flows_erasmus_full_zeros |>\n  rename(sending_country_name = receiving_country_name,\n         receiving_country_name = sending_country_name,\n         reverse_exchanges = exchanges)\n\n\nfull_join(flows_erasmus_full_zeros, reverse_flows_erasmus_full_zeros,\n          by = (c(\"sending_country_name\", \"receiving_country_name\"))) |> \n  ungroup() |>\n  select(exchanges, reverse_exchanges) |>\n  cor() |> \n  as_tibble()\n\n# A tibble: 2 x 2\n  exchanges reverse_exchanges\n      <dbl>             <dbl>\n1     1                 0.463\n2     0.463             1    \n\n\nThis scatterplot is by design symetric in the diagonal\n\nfull_join(flows_erasmus_full_zeros, reverse_flows_erasmus_full_zeros,\n          by = (c(\"sending_country_name\", \"receiving_country_name\"))) |> \n  ungroup() |>\n  select(exchanges, reverse_exchanges) |>\n  ggplot() +\n  geom_point(aes(y=exchanges, x=reverse_exchanges) )\n\n\n\n\nRelation between exchanges\n\n\n\n\n\n\n8 Modeling\nRead the neighbor relations between countries\n\nadjacency <- read_csv(here(\"C:/Users/Gebruiker/Desktop/TidyTuesday/TT_20221115/adjacency.csv\")) |>\n  rename(sending_country_name = country_name,\n         receiving_country_name = neighbor) |>\n  # mark the rows that indicate shared borders\n  mutate(adjacent = 1) |>\n  # merge with the data that include all possible mobility streams\n  right_join(possible_mobility_names,\n             by=c(\"sending_country_name\",\"receiving_country_name\")) |>\n  # Set non-adjacent to 0\n  mutate(adjacent = replace_na(adjacent, 0)) \n\nRows: 120 Columns: 2\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (2): country_name, neighbor\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nmodel_data <- \n  flows_erasmus_full_zeros |> \n  inner_join(adjacency, \n            by = c(\"sending_country_name\",\"receiving_country_name\")) |>  \n  group_by(sending_country_name) |>\n  # total outflow from country\n  mutate(outflow = sum(exchanges)) |>\n  group_by(receiving_country_name) |>\n  # total inflow into country\n  mutate(inflow = sum(exchanges)) \n\nNumber of student exchanges from A to B as a function of total numbers of outgoing students from A and of total numbers of visiting students in B\n\nmodel_01 <- lm(formula = exchanges ~  inflow + outflow ,          , \n               data = model_data)\ntidy(model_01)\n\n# A tibble: 3 x 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept) -12.2      0.942       -13.0 2.49e- 36\n2 inflow        0.0281   0.00100      27.9 1.63e-135\n3 outflow       0.0285   0.00161      17.7 2.55e- 63\n\nglance(model_01)\n\n# A tibble: 1 x 12\n  r.squared adj.r.s~1 sigma stati~2   p.value    df logLik    AIC    BIC devia~3\n      <dbl>     <dbl> <dbl>   <dbl>     <dbl> <dbl>  <dbl>  <dbl>  <dbl>   <dbl>\n1     0.448     0.447  17.5    539. 2.98e-172     2 -5703. 11415. 11436. 408538.\n# ... with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names 1: adj.r.squared, 2: statistic, 3: deviance\n\n\nAdd adjacency\n\nmodel_02 <- lm(formula = exchanges ~  inflow + outflow + adjacent, \n               data = model_data)\ntidy(model_02)\n\n# A tibble: 4 x 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept) -12.9     0.881        -14.7 2.03e- 45\n2 inflow        0.0274  0.000939      29.1 1.27e-144\n3 outflow       0.0265  0.00151       17.5 3.93e- 62\n4 adjacent     23.0     1.64          14.0 9.76e- 42\n\nglance(model_02)\n\n# A tibble: 1 x 12\n  r.squared adj.r.s~1 sigma stati~2   p.value    df logLik    AIC    BIC devia~3\n      <dbl>     <dbl> <dbl>   <dbl>     <dbl> <dbl>  <dbl>  <dbl>  <dbl>   <dbl>\n1     0.519     0.518  16.4    478. 1.36e-210     3 -5612. 11233. 11259. 355879.\n# ... with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names 1: adj.r.squared, 2: statistic, 3: deviance\n\n\nStudents appear to fancy visiting nearby countries abroad!\n\n\n9 Visualization\nVisualization 1: Chord diagram (using library circlize)\nFull country names\n\nflows_erasmus_full_zeros |> \n  filter(exchanges > 0) |>\n  arrange(-exchanges) |> \n  chordDiagram()\n\n\n\n\nChord diagram\n\n\n\n\nUse the 2-letter abbreviations of countries here.\n\nflows_erasmus_full_zeros |> \n  filter(exchanges > 0) |>\n  arrange(-exchanges) |> \n  # without ungroup() the .._country_name columns will\n  # be retained\n  ungroup() |>\n  select(sending_country_code, receiving_country_code,\n         exchanges) |>\n  chordDiagram()\n\n\n\n\nChord diagram with 2-letter abbreviations\n\n\n\n\nOnly flows over 100\n\nflows_erasmus_full_zeros |> \n  filter(exchanges > 100) |>\n  arrange(-exchanges) |> \n  ungroup() |>\n  select(sending_country_code, receiving_country_code,\n         exchanges) |>\n  chordDiagram()\n\n\n\n\nChord diagram with only flows over 100\n\n\n\n\nVisulaization 2: Network representation We can also represent the countries as nodes in a network, with the student flows representing the links between them. Use package igraph here.\n\nflows_erasmus_full_zeros |>\n  filter(exchanges > 100) |>\n  graph_from_data_frame(directed = TRUE, \n                      vertices=country_labels) |>\n  plot(vertex.size=5)\n\n\n\n\nNetwork representation\n\n\n\n\nNo isolates\n\nflows_erasmus_full_zeros |>\n  filter(exchanges > 75) |>\n  graph_from_data_frame(directed = TRUE) |>\n  plot(vertex.size=5)\nflows_erasmus_full_zeros |>\n  filter(exchanges > 100) |>\n  graph_from_data_frame(directed = TRUE) |>\n  plot(vertex.size=5)\n\n\n\n\n\n\nNo isolates\n\n\n\n\n\n\n\nNo isolates\n\n\n\n\n\n\nFor alternative methods of visualizing mobility while maintaining the geographic relations, see Andrew Wheeler’s 2015 paper in Cartography and Geographic Information Science, at (behind paywall), here"
  }
]