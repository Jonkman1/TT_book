[
  {
    "objectID": "01_TT_202201.html",
    "href": "01_TT_202201.html",
    "title": "2  Exploration and vizualization of Starbuck coffee use",
    "section": "",
    "text": "3 Load data\nThe data are loaded directly from the TidyTuesday github page.\nHere are some explorative commands you can use:\n- star-df opens the dataset and shows you the variables. - names(star_df)gives you the names of the 15 variables. - glimpse(star_df)shows you the number of rows (often particpants) and columns (often variables) and also informs you about the kind of variables. - dim(star_df) informs you about number of rows and columns.\n- sum(is.na(star_df)) show you the number of missing variables.\nWhen you want to look at a specific subset with the product_name brewed coffee for example you can define this as:.\nCan you plot between calories(y) and total_fat_g (x)? Show the diffence on whip_char'and show it for the sixmilk-labs` you recoded.\nSave the plot on your computer as a png-file. Here is place in a projectmap and a submap images which I made on my computer. Change the path if necessary for your computer.\nFor counting frequencies you always can use different methods. We show some of them.\nThis is the R base-way for counting the variable whipfor example.\nThis is the grouping-way.\nThis is a better way (thanks Wim!).\nHere we do some basic cleaning. We select six variables and look only at variables of which the size is grande. We call this dataset star_clean.\nLet us plot it on different ways.The first three are similar.\nThen we plot the coffee of which the whipis 1.\nFor the next plot we first change the class of the variable milk into a character variable and save it as a different dataset.\nWe plot this new dataset on three different ways."
  },
  {
    "objectID": "01_TT_202201.html#introduction",
    "href": "01_TT_202201.html#introduction",
    "title": "2  Exploration and vizualization of Starbuck coffee use",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\nOn 11 January 2022 and 25 January 2022 Sam Langton gave NSCR Tidy Tuesday presentations on the exploration and visualization of Starbuck coffee use data.In this document both presentations are combined.\n[^1]. Here you can find it on the NSCR- website. Here is the First presentation. Here is the Second presentation"
  },
  {
    "objectID": "01_TT_202201.html#load-libraries.",
    "href": "01_TT_202201.html#load-libraries.",
    "title": "2  Exploration and vizualization of Starbuck coffee use",
    "section": "2.2 Load libraries.",
    "text": "2.2 Load libraries.\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TT_book",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "09_TT_202211.html",
    "href": "09_TT_202211.html",
    "title": "4  Student mobility in Europe",
    "section": "",
    "text": "5 Introduction\nIn this workshop, Wim Bernasco explores a Tidy Tuesday dataset about the European Union Erasmus+ student mobility program. This dataset was used in the main Tidy Tuesday of week 10 in 2022. For more information on this data, including the codebook, see the RForDataScience GitHub registry.\nIn this workshop, the focus is on exploring, analyzing, and maybe visualizing student streams between countries. Different descriptive questions will be answered:\nHere you find the link to the NSC-R Tidy Tuesday page.\n\n\n6 Get started\nInstall uninstalled packages tidyverse, here and tidytuesdayR.\n\nif (! require(\"tidyverse\")) install.packages(\n  pkgs = \"tidyverse\", repos = \"http://cran.us.r-project.org\"\n)\n\n\n  There is a binary version available but the source version is later:\n       binary source needs_compilation\ngargle  1.2.1  1.3.0             FALSE\n\npackage 'ps' successfully unpacked and MD5 sums checked\npackage 'rematch' successfully unpacked and MD5 sums checked\npackage 'processx' successfully unpacked and MD5 sums checked\npackage 'backports' successfully unpacked and MD5 sums checked\npackage 'assertthat' successfully unpacked and MD5 sums checked\npackage 'blob' successfully unpacked and MD5 sums checked\npackage 'DBI' successfully unpacked and MD5 sums checked\npackage 'data.table' successfully unpacked and MD5 sums checked\npackage 'uuid' successfully unpacked and MD5 sums checked\npackage 'cellranger' successfully unpacked and MD5 sums checked\npackage 'ids' successfully unpacked and MD5 sums checked\npackage 'rematch2' successfully unpacked and MD5 sums checked\npackage 'timechange' successfully unpacked and MD5 sums checked\npackage 'callr' successfully unpacked and MD5 sums checked\npackage 'selectr' successfully unpacked and MD5 sums checked\npackage 'broom' successfully unpacked and MD5 sums checked\npackage 'dbplyr' successfully unpacked and MD5 sums checked\npackage 'dtplyr' successfully unpacked and MD5 sums checked\npackage 'forcats' successfully unpacked and MD5 sums checked\npackage 'googledrive' successfully unpacked and MD5 sums checked\npackage 'googlesheets4' successfully unpacked and MD5 sums checked\npackage 'haven' successfully unpacked and MD5 sums checked\npackage 'lubridate' successfully unpacked and MD5 sums checked\npackage 'modelr' successfully unpacked and MD5 sums checked\npackage 'readxl' successfully unpacked and MD5 sums checked\npackage 'reprex' successfully unpacked and MD5 sums checked\npackage 'rvest' successfully unpacked and MD5 sums checked\npackage 'xml2' successfully unpacked and MD5 sums checked\npackage 'tidyverse' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"here\")) install.packages(\n  pkgs = \"here\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'here' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"tidytuesdayR\")) install.packages(\n  pkgs = \"tidytuesdayR\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'tidytuesdayR' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"broom\")) install.packages(\n  pkgs = \"broom\", repos = \"http://cran.us.r-project.org\"\n)\nif (! require(\"circlize\")) install.packages(\n  pkgs = \"circlize\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'GlobalOptions' successfully unpacked and MD5 sums checked\npackage 'shape' successfully unpacked and MD5 sums checked\npackage 'circlize' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\nif (! require(\"igraph\")) install.packages(\n  pkgs = \"igraph\", repos = \"http://cran.us.r-project.org\"\n)\n\npackage 'igraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Gebruiker\\AppData\\Local\\Temp\\RtmpKAjge1\\downloaded_packages\n\n\nLoad the required libraries\n\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(here)\nlibrary(tidytuesdayR)\nlibrary(circlize)\nlibrary(igraph)\n\nLoad the datafile For information see\n\n\n\n\n\n\nNote\n\n\n\nThe ‘participants’ field is a frequency weight!\n\n\nOpen the dataset\n\ntuesdata <- tt_load(2022, week = 10)\n\n--- Compiling #TidyTuesday Information for 2022-03-08 ----\n\n\n--- There is 1 file available ---\n\n\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `erasmus.csv`\n\n\n--- Download complete ---\n\nerasmus <- tuesdata$erasmus\n\nThere are two additional ‘helper’ datafiles used used in this script: country_names.csv: The full names and EU-status of the countries adjacency.csv : Pairs of countries that are adjacent (share borders)\nI will address some of the following descriptive questions:\n- How many students studied abroad?\n- What are the top-10 receiving countries?\n- What are the top-10 sending countries?\n- Which are the 10 most frequent origin-destination country combinations?\n- Are reverse flows (the flow from A to B and the flow from B to A) correlated?\nThe following modeling questions will be answered:\n- How does total number of students from country A to country B depend on the total number of student from A and the total number of students from B?\n- Do adjacent countries attract more or less students than non-adjacent countries?\nIf time permits some visualization questions will be answered:\n- Are there some ways of visualizing mobility data?\n\n\n7 Exploration and preparation\nFirst we explore the data:\n\nerasmus |> names()\n\n [1] \"project_reference\"                   \"academic_year\"                      \n [3] \"mobility_start_month\"                \"mobility_end_month\"                 \n [5] \"mobility_duration\"                   \"activity_mob\"                       \n [7] \"field_of_education\"                  \"participant_nationality\"            \n [9] \"education_level\"                     \"participant_gender\"                 \n[11] \"participant_profile\"                 \"special_needs\"                      \n[13] \"fewer_opportunities\"                 \"group_leader\"                       \n[15] \"participant_age\"                     \"sending_country_code\"               \n[17] \"sending_city\"                        \"sending_organization\"               \n[19] \"sending_organisation_erasmus_code\"   \"receiving_country_code\"             \n[21] \"receiving_city\"                      \"receiving_organization\"             \n[23] \"receiving_organisation_erasmus_code\" \"participants\"                       \n\nerasmus |> glimpse()\n\nRows: 164,635\nColumns: 24\n$ project_reference                   <chr> \"2014-1-AT02-KA347-000139\", \"2014-~\n$ academic_year                       <chr> \"2014-2015\", \"2014-2015\", \"2014-20~\n$ mobility_start_month                <chr> \"2014-11\", \"2014-11\", \"2014-11\", \"~\n$ mobility_end_month                  <chr> \"2014-11\", \"2014-11\", \"2014-11\", \"~\n$ mobility_duration                   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n$ activity_mob                        <chr> \"National youth meetings\", \"Nation~\n$ field_of_education                  <chr> \"? Unknown ?\", \"? Unknown ?\", \"? U~\n$ participant_nationality             <chr> \"AT\", \"AT\", \"AT\", \"AT\", \"AT\", \"AT\"~\n$ education_level                     <chr> \"??? - ? Unknown ?\", \"??? - ? Unkn~\n$ participant_gender                  <chr> \"Female\", \"Female\", \"Female\", \"Mal~\n$ participant_profile                 <chr> \"Learner\", \"Learner\", \"Learner\", \"~\n$ special_needs                       <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"~\n$ fewer_opportunities                 <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\",~\n$ group_leader                        <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"~\n$ participant_age                     <dbl> 13, 14, 15, 14, 15, 15, 16, 17, 18~\n$ sending_country_code                <chr> \"AT\", \"AT\", \"AT\", \"AT\", \"AT\", \"AT\"~\n$ sending_city                        <chr> \"Dornbirn\", \"Dornbirn\", \"Dornbirn\"~\n$ sending_organization                <chr> \"bOJA - Bundesweites Netzwerk Offe~\n$ sending_organisation_erasmus_code   <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\",~\n$ receiving_country_code              <chr> \"AT\", \"AT\", \"AT\", \"AT\", \"AT\", \"AT\"~\n$ receiving_city                      <chr> \"Dornbirn\", \"Dornbirn\", \"Dornbirn\"~\n$ receiving_organization              <chr> \"bOJA - Bundesweites Netzwerk Offe~\n$ receiving_organisation_erasmus_code <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\",~\n$ participants                        <dbl> 2, 3, 3, 4, 2, 2, 1, 3, 1, 2, 1, 2~\n\nerasmus |> count(participants)\n\n# A tibble: 99 x 2\n   participants      n\n          <dbl>  <int>\n 1            1 118352\n 2            2  22804\n 3            3   8756\n 4            4   4642\n 5            5   2572\n 6            6   1775\n 7            7   1125\n 8            8    874\n 9            9    668\n10           10    502\n# ... with 89 more rows\n\n\nFirst check number of rows\n\nerasmus |> dim()\n\n[1] 164635     24\n\n\nNumber of rows after ‘expansion’. Expansion expands a frequency-weighted datafile to a regular file where each row represents a single student exchange trip.\n\nerasmus |> \n  uncount(participants) |>\n  dim()\n\n[1] 309751     23\n\n\nFrom which countries do participants come?\n\nerasmus |> \n  count(sending_country_code)\n\n# A tibble: 54 x 2\n   sending_country_code     n\n   <chr>                <int>\n 1 AL                     132\n 2 AM                     127\n 3 AT                    3484\n 4 AZ                      54\n 5 BA                      83\n 6 BE                    3279\n 7 BG                    4412\n 8 BY                      69\n 9 CY                    1886\n10 CZ                    6086\n# ... with 44 more rows\n\n\nTo which country do participants go?\n\nerasmus |>\n  count(receiving_country_code)\n\n# A tibble: 34 x 2\n   receiving_country_code     n\n   <chr>                  <int>\n 1 AT                      3451\n 2 BE                      4008\n 3 BG                      4120\n 4 CY                      1981\n 5 CZ                      6107\n 6 DE                     17000\n 7 DK                      1484\n 8 EE                      3637\n 9 EL                      2042\n10 ES                     11188\n# ... with 24 more rows\n\n\nAdd names to the codes. There are several options to do this. - Option 1: Explicit in-script recoding\n\nerasmus |>\n  mutate(sending_country_name =\n           case_when(sending_country_code == \"AT\" ~ \"Austria\",\n                     sending_country_code == \"BE\" ~ \"Belgium\",\n                     sending_country_code == \"BG\" ~ \"Bulgaria\",\n                     sending_country_code == \"CY\" ~ \"Cyprus\",\n                     sending_country_code == \"CZ\" ~ \"Czechia\",\n                     sending_country_code == \"DE\" ~ \"Germany\",\n                     sending_country_code == \"DK\" ~ \"Denkmark\"\n                     # .........\n           )) |>\n  count(sending_country_name)\n\n# A tibble: 8 x 2\n  sending_country_name      n\n  <chr>                 <int>\n1 Austria                3484\n2 Belgium                3279\n3 Bulgaria               4412\n4 Cyprus                 1886\n5 Czechia                6086\n6 Denkmark               1426\n7 Germany               17155\n8 <NA>                 126907\n\n\n\nOption 2: Join with look-up table in a separate CSV file\n\n\ncountry_labels <- read_csv(here(\"C:/Users/Gebruiker/Desktop/TidyTuesday/TT_20221115/country_names.csv\"))\n\nRows: 37 Columns: 3\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): country_name, country_code, country_status\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nerasmus |>\n  left_join(country_labels, \n            by=c(\"receiving_country_code\" = \"country_code\")) |>\n  rename(receiving_country_name = country_name,\n         receiving_country_status = country_status)\n\n# A tibble: 164,635 x 26\n   project_ref~1 acade~2 mobil~3 mobil~4 mobil~5 activ~6 field~7 parti~8 educa~9\n   <chr>         <chr>   <chr>   <chr>     <dbl> <chr>   <chr>   <chr>   <chr>  \n 1 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 2 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 3 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 4 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 5 2014-1-AT02-~ 2014-2~ 2014-11 2014-11       1 Nation~ ? Unkn~ AT      ??? - ~\n 6 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n 7 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n 8 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n 9 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n10 2014-1-AT02-~ 2014-2~ 2014-12 2014-12       1 Nation~ ? Unkn~ AT      ??? - ~\n# ... with 164,625 more rows, 17 more variables: participant_gender <chr>,\n#   participant_profile <chr>, special_needs <chr>, fewer_opportunities <chr>,\n#   group_leader <chr>, participant_age <dbl>, sending_country_code <chr>,\n#   sending_city <chr>, sending_organization <chr>,\n#   sending_organisation_erasmus_code <chr>, receiving_country_code <chr>,\n#   receiving_city <chr>, receiving_organization <chr>,\n#   receiving_organisation_erasmus_code <chr>, participants <dbl>, ...\n\n\nCombining some of the above transformations we created a clean file\n\nlabeled_erasmus_full <- \n  erasmus |>\n  # Keep only a subset of columns/variables\n  select(sending_country_code, receiving_country_code, \n         participant_gender, academic_year, activity_mob, participants) |>\n  # insert names of receiving countries by linking to country codes\n  left_join(country_labels, \n            by=c(\"receiving_country_code\" = \"country_code\")) |>\n  # make sure the column names are clear \n  rename(receiving_country_name = country_name,\n         receiving_country_status = country_status) |> \n  # insert names of sending countries by linking to country codes\n  left_join(country_labels, \n            by=c(\"sending_country_code\" = \"country_code\")) |>\n  # make sure the column names are clear \n  rename(sending_country_name = country_name,\n         sending_country_status = country_status) |> \n  # exclude countries outside EU and with no affiliation to EU\n  filter(sending_country_status %in% c(\"EU\", \"EFTA\", \"UK\", \"Candidate\"),\n         receiving_country_status %in% c(\"EU\", \"EFTA\", \"UK\", \"Candidate\")) |>\n  # exclude the (many!) within-country exchanges\n  filter(sending_country_code != receiving_country_code) |>\n  # Only international mobility program\n  filter(activity_mob == \"Transnational youth meetings\") |>\n  # Every row becomes an individual international student trip \n  uncount(participants) \n\n\n\n8 Descriptive questions\nHow many students are there?\n\nlabeled_erasmus_full |>\n  dim()\n\n[1] 15693     9\n\n\nWhere did they come from?\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>\n  print(n=Inf)\n\n# A tibble: 36 x 2\n   sending_country_name     n\n   <chr>                <int>\n 1 Albania                169\n 2 Austria                565\n 3 Belgium                662\n 4 Bulgaria               526\n 5 Croatia                323\n 6 Cyprus                 121\n 7 Czechia                531\n 8 Denmark                296\n 9 Estonia                292\n10 Finland                307\n11 France                 622\n12 Germany               1314\n13 Greece                 483\n14 Hungary                473\n15 Iceland                 25\n16 Ireland                225\n17 Italy                 1098\n18 Latvia                 386\n19 Liechtenstein            6\n20 Lithuania              411\n21 Luxembourg             166\n22 Malta                   58\n23 Montenegro              27\n24 Netherlands            630\n25 North Macedonia        185\n26 Norway                 133\n27 Poland                 837\n28 Portugal               468\n29 Romania                745\n30 Serbia                 343\n31 Slovakia               370\n32 Slovenia               268\n33 Spain                  819\n34 Sweden                 495\n35 Turkey                 553\n36 United Kingdom         761\n\n\nVisualization as a bar graph\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>  \n  ggplot() + \n  geom_col(aes(x=sending_country_name, y=n))\n\n\n\n\nWhere do students come from, horizontal\n\n\n\n\nWith vertical labels labels\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>  \n  ggplot() + \n  geom_col(aes(x=sending_country_name, y=n)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nWhere do students come from, vertical\n\n\n\n\nOrder by frequency.\n\nlabeled_erasmus_full |> \n  count(sending_country_code) |>  \n  arrange(-n) |>\n    # Converting character variable to factor variable\n    mutate(sending_country_code=factor(sending_country_code,\n                                     levels = unique(sending_country_code),\n                                     ordered = T)) |>\n  ggplot() + \n  geom_col(aes(x=sending_country_code, y=n)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nWhere do students come from, ordered\n\n\n\n\nWhere did they go to?\n\nlabeled_erasmus_full |> \n  count(receiving_country_name) |>\n  arrange(-n) |>\n  print(n=Inf)\n\n# A tibble: 31 x 2\n   receiving_country_name     n\n   <chr>                  <int>\n 1 France                  2403\n 2 Belgium                 1428\n 3 Spain                   1204\n 4 Germany                 1095\n 5 Italy                   1017\n 6 Netherlands              765\n 7 Luxembourg               607\n 8 Estonia                  524\n 9 Czechia                  518\n10 Lithuania                495\n11 Austria                  485\n12 United Kingdom           483\n13 Greece                   444\n14 Romania                  423\n15 Turkey                   371\n16 Slovenia                 355\n17 Croatia                  343\n18 Denmark                  340\n19 Poland                   340\n20 Portugal                 296\n21 Norway                   286\n22 Sweden                   250\n23 Cyprus                   214\n24 Ireland                  186\n25 Latvia                   165\n26 Malta                    163\n27 Bulgaria                 149\n28 Hungary                  116\n29 North Macedonia          111\n30 Slovakia                  67\n31 Finland                   50\n\n\n\nlabeled_erasmus_full |> \n  count(receiving_country_name) |>\n  arrange(-n) |>\n  print(n=Inf)\n\n# A tibble: 31 x 2\n   receiving_country_name     n\n   <chr>                  <int>\n 1 France                  2403\n 2 Belgium                 1428\n 3 Spain                   1204\n 4 Germany                 1095\n 5 Italy                   1017\n 6 Netherlands              765\n 7 Luxembourg               607\n 8 Estonia                  524\n 9 Czechia                  518\n10 Lithuania                495\n11 Austria                  485\n12 United Kingdom           483\n13 Greece                   444\n14 Romania                  423\n15 Turkey                   371\n16 Slovenia                 355\n17 Croatia                  343\n18 Denmark                  340\n19 Poland                   340\n20 Portugal                 296\n21 Norway                   286\n22 Sweden                   250\n23 Cyprus                   214\n24 Ireland                  186\n25 Latvia                   165\n26 Malta                    163\n27 Bulgaria                 149\n28 Hungary                  116\n29 North Macedonia          111\n30 Slovakia                  67\n31 Finland                   50\n\n\nLet us visualise this also, vertical and ordered.\n\nlabeled_erasmus_full |> \n  count(receiving_country_code) |>  \n  arrange(-n) |>\n  mutate(receiving_country_code=factor(receiving_country_code,\n                                       levels = unique(receiving_country_code),\n                                       ordered = T)) |>\n  ggplot() + \n  geom_col(aes(x=receiving_country_code, y=n)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nHow many students do countries receive, ordered\n\n\n\n\nTop 10 Where did they go to.\n\nlabeled_erasmus_full |> \n  count(receiving_country_name) |>\n  arrange(-n) |> \n  head(n=10)\n\n# A tibble: 10 x 2\n   receiving_country_name     n\n   <chr>                  <int>\n 1 France                  2403\n 2 Belgium                 1428\n 3 Spain                   1204\n 4 Germany                 1095\n 5 Italy                   1017\n 6 Netherlands              765\n 7 Luxembourg               607\n 8 Estonia                  524\n 9 Czechia                  518\n10 Lithuania                495\n\n\nTop 10 Where did they come from\n\nlabeled_erasmus_full |> \n  count(sending_country_name) |>\n  arrange(-n) |> \n  head(n=10)\n\n# A tibble: 10 x 2\n   sending_country_name     n\n   <chr>                <int>\n 1 Germany               1314\n 2 Italy                 1098\n 3 Poland                 837\n 4 Spain                  819\n 5 United Kingdom         761\n 6 Romania                745\n 7 Belgium                662\n 8 Netherlands            630\n 9 France                 622\n10 Austria                565\n\n\nTop 10 origin-destination combinations\n\nlabeled_erasmus_full |> \n  count(sending_country_name, receiving_country_name) |>\n  arrange(-n) |> \n  head(n=10)\n\n# A tibble: 10 x 3\n   sending_country_name receiving_country_name     n\n   <chr>                <chr>                  <int>\n 1 Germany              France                   305\n 2 Italy                France                   268\n 3 Germany              Belgium                  235\n 4 Belgium              France                   198\n 5 Italy                Spain                    170\n 6 Spain                France                   149\n 7 United Kingdom       France                   131\n 8 Spain                Italy                    123\n 9 Poland               France                   122\n10 France               Belgium                  120\n\n\n# Intermezzo \n(Cartesian product = cross-product = all combinations) \n\nTiny dataset of team members\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_members <- tibble(name = c( \"Alex\", \"Asier\", \"Franziska\", \"Sam\", \"Wim\")) \n# Tiny datset of available days\nsessions <- tibble(day = c(\"Monday\", \"Tuesday\", \"Thursday\"))\n:::\nMake all combinations of team members and available days\n\nfull_join(team_members, sessions, by = as.character())\n\nWarning: Using `by = character()` to perform a cross join was deprecated in dplyr 1.1.0.\ni Please use `cross_join()` instead.\n\n\n# A tibble: 15 x 2\n   name      day     \n   <chr>     <chr>   \n 1 Alex      Monday  \n 2 Alex      Tuesday \n 3 Alex      Thursday\n 4 Asier     Monday  \n 5 Asier     Tuesday \n 6 Asier     Thursday\n 7 Franziska Monday  \n 8 Franziska Tuesday \n 9 Franziska Thursday\n10 Sam       Monday  \n11 Sam       Tuesday \n12 Sam       Thursday\n13 Wim       Monday  \n14 Wim       Tuesday \n15 Wim       Thursday\n\n\nSame results, but more transparent code.\n\n\nthanks to Nick van Doormaal for this suggestion\n\nexpand_grid(team_members, sessions)\n\n# A tibble: 15 x 2\n   name      day     \n   <chr>     <chr>   \n 1 Alex      Monday  \n 2 Alex      Tuesday \n 3 Alex      Thursday\n 4 Asier     Monday  \n 5 Asier     Tuesday \n 6 Asier     Thursday\n 7 Franziska Monday  \n 8 Franziska Tuesday \n 9 Franziska Thursday\n10 Sam       Monday  \n11 Sam       Tuesday \n12 Sam       Thursday\n13 Wim       Monday  \n14 Wim       Tuesday \n15 Wim       Thursday\n\nfull_join(team_members, team_members, by = as.character()) |>\n  filter(name.x != name.y)\n\n# A tibble: 20 x 2\n   name.x    name.y   \n   <chr>     <chr>    \n 1 Alex      Asier    \n 2 Alex      Franziska\n 3 Alex      Sam      \n 4 Alex      Wim      \n 5 Asier     Alex     \n 6 Asier     Franziska\n 7 Asier     Sam      \n 8 Asier     Wim      \n 9 Franziska Alex     \n10 Franziska Asier    \n11 Franziska Sam      \n12 Franziska Wim      \n13 Sam       Alex     \n14 Sam       Asier    \n15 Sam       Franziska\n16 Sam       Wim      \n17 Wim       Alex     \n18 Wim       Asier    \n19 Wim       Franziska\n20 Wim       Sam      \n\n\n\nCreate all possible combinations of sending and receiving country names.\n\n::: {.cell}\n\n```{.r .cell-code}\npossible_mobility_names <- \n  full_join(country_labels, country_labels,\n            by = as.character()) |>\n  select(sending_country_name   = country_name.x,\n         receiving_country_name = country_name.y,\n         sending_country_code   = country_code.x,\n         receiving_country_code = country_code.y) |>\n  filter(sending_country_name != receiving_country_name)\n:::\nErasmus student mobility flows including zero flows\n\nflows_erasmus_full_zeros <-\n  labeled_erasmus_full |> \n  group_by(sending_country_name, receiving_country_name) |>\n  # Origin, destination, count\n  count() |>\n  rename(exchanges = n) |>\n  # join with all combinations to include zero-flow pairs\n  right_join(possible_mobility_names) |> \n  # change the NAs (= zero-flow) into 0\n  replace_na(list(exchanges=0))\n\nJoining with `by = join_by(sending_country_name, receiving_country_name)`\n\n\nNumber of exchanges frequencies reversed: 581 zero flows, 37 1-person flow\n\nflows_erasmus_full_zeros |>\n  ungroup() |>\n  count(exchanges) |>\n  arrange(exchanges) |>\n  print(n=40)\n\n# A tibble: 98 x 2\n   exchanges     n\n       <int> <int>\n 1         0   581\n 2         1    37\n 3         2    37\n 4         3    48\n 5         4    35\n 6         5    42\n 7         6    30\n 8         7    32\n 9         8    29\n10         9    19\n11        10    28\n12        11    20\n13        12    27\n14        13    14\n15        14    18\n16        15    20\n17        16    15\n18        17    15\n19        18    13\n20        19    15\n21        20    16\n22        21    10\n23        22    13\n24        23    14\n25        24     9\n26        25    13\n27        26     7\n28        27     7\n29        28     7\n30        29    13\n31        30     8\n32        31     9\n33        32     4\n34        33     7\n35        34     4\n36        35     4\n37        36     6\n38        37     6\n39        38     4\n40        39     3\n# ... with 58 more rows\n\n\nLet us make a histogram of this distribution\n\nflows_erasmus_full_zeros |>\n  ggplot() +\n  geom_histogram(aes(x=exchanges), binwidth = 5)\n\n\n\n\nHistogram of student mobility flow\n\n\n\n\n\nreverse_flows_erasmus_full_zeros <-\n  flows_erasmus_full_zeros |>\n  rename(sending_country_name = receiving_country_name,\n         receiving_country_name = sending_country_name,\n         reverse_exchanges = exchanges)\n\n\nfull_join(flows_erasmus_full_zeros, reverse_flows_erasmus_full_zeros,\n          by = (c(\"sending_country_name\", \"receiving_country_name\"))) |> \n  ungroup() |>\n  select(exchanges, reverse_exchanges) |>\n  cor() |> \n  as_tibble()\n\n# A tibble: 2 x 2\n  exchanges reverse_exchanges\n      <dbl>             <dbl>\n1     1                 0.463\n2     0.463             1    \n\n\nThis scatterplot is by design symetric in the diagonal\n\nfull_join(flows_erasmus_full_zeros, reverse_flows_erasmus_full_zeros,\n          by = (c(\"sending_country_name\", \"receiving_country_name\"))) |> \n  ungroup() |>\n  select(exchanges, reverse_exchanges) |>\n  ggplot() +\n  geom_point(aes(y=exchanges, x=reverse_exchanges) )\n\n\n\n\nRelation between exchanges\n\n\n\n\n\n\n9 Modeling\nRead the neighbor relations between countries\n\nadjacency <- read_csv(here(\"C:/Users/Gebruiker/Desktop/TidyTuesday/TT_20221115/adjacency.csv\")) |>\n  rename(sending_country_name = country_name,\n         receiving_country_name = neighbor) |>\n  # mark the rows that indicate shared borders\n  mutate(adjacent = 1) |>\n  # merge with the data that include all possible mobility streams\n  right_join(possible_mobility_names,\n             by=c(\"sending_country_name\",\"receiving_country_name\")) |>\n  # Set non-adjacent to 0\n  mutate(adjacent = replace_na(adjacent, 0)) \n\nRows: 120 Columns: 2\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (2): country_name, neighbor\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nmodel_data <- \n  flows_erasmus_full_zeros |> \n  inner_join(adjacency, \n            by = c(\"sending_country_name\",\"receiving_country_name\")) |>  \n  group_by(sending_country_name) |>\n  # total outflow from country\n  mutate(outflow = sum(exchanges)) |>\n  group_by(receiving_country_name) |>\n  # total inflow into country\n  mutate(inflow = sum(exchanges)) \n\nNumber of student exchanges from A to B as a function of total numbers of outgoing students from A and of total numbers of visiting students in B\n\nmodel_01 <- lm(formula = exchanges ~  inflow + outflow ,          , \n               data = model_data)\ntidy(model_01)\n\n# A tibble: 3 x 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept) -12.2      0.942       -13.0 2.49e- 36\n2 inflow        0.0281   0.00100      27.9 1.63e-135\n3 outflow       0.0285   0.00161      17.7 2.55e- 63\n\nglance(model_01)\n\n# A tibble: 1 x 12\n  r.squared adj.r.s~1 sigma stati~2   p.value    df logLik    AIC    BIC devia~3\n      <dbl>     <dbl> <dbl>   <dbl>     <dbl> <dbl>  <dbl>  <dbl>  <dbl>   <dbl>\n1     0.448     0.447  17.5    539. 2.98e-172     2 -5703. 11415. 11436. 408538.\n# ... with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names 1: adj.r.squared, 2: statistic, 3: deviance\n\n\nAdd adjacency\n\nmodel_02 <- lm(formula = exchanges ~  inflow + outflow + adjacent, \n               data = model_data)\ntidy(model_02)\n\n# A tibble: 4 x 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept) -12.9     0.881        -14.7 2.03e- 45\n2 inflow        0.0274  0.000939      29.1 1.27e-144\n3 outflow       0.0265  0.00151       17.5 3.93e- 62\n4 adjacent     23.0     1.64          14.0 9.76e- 42\n\nglance(model_02)\n\n# A tibble: 1 x 12\n  r.squared adj.r.s~1 sigma stati~2   p.value    df logLik    AIC    BIC devia~3\n      <dbl>     <dbl> <dbl>   <dbl>     <dbl> <dbl>  <dbl>  <dbl>  <dbl>   <dbl>\n1     0.519     0.518  16.4    478. 1.36e-210     3 -5612. 11233. 11259. 355879.\n# ... with 2 more variables: df.residual <int>, nobs <int>, and abbreviated\n#   variable names 1: adj.r.squared, 2: statistic, 3: deviance\n\n\nStudents appear to fancy visiting nearby countries abroad!\n\n\n10 Visualization\nVisualization 1: Chord diagram (using library circlize)\nFull country names\n\nflows_erasmus_full_zeros |> \n  filter(exchanges > 0) |>\n  arrange(-exchanges) |> \n  chordDiagram()\n\n\n\n\nChord diagram\n\n\n\n\nUse the 2-letter abbreviations of countries here.\n\nflows_erasmus_full_zeros |> \n  filter(exchanges > 0) |>\n  arrange(-exchanges) |> \n  # without ungroup() the .._country_name columns will\n  # be retained\n  ungroup() |>\n  select(sending_country_code, receiving_country_code,\n         exchanges) |>\n  chordDiagram()\n\n\n\n\nChord diagram with 2-letter abbreviations\n\n\n\n\nOnly flows over 100\n\nflows_erasmus_full_zeros |> \n  filter(exchanges > 100) |>\n  arrange(-exchanges) |> \n  ungroup() |>\n  select(sending_country_code, receiving_country_code,\n         exchanges) |>\n  chordDiagram()\n\n\n\n\nChord diagram with only flows over 100\n\n\n\n\nVisulaization 2: Network representation We can also represent the countries as nodes in a network, with the student flows representing the links between them. Use package igraph here.\n\nflows_erasmus_full_zeros |>\n  filter(exchanges > 100) |>\n  graph_from_data_frame(directed = TRUE, \n                      vertices=country_labels) |>\n  plot(vertex.size=5)\n\n\n\n\nNetwork representation\n\n\n\n\nNo isolates\n\nflows_erasmus_full_zeros |>\n  filter(exchanges > 75) |>\n  graph_from_data_frame(directed = TRUE) |>\n  plot(vertex.size=5)\nflows_erasmus_full_zeros |>\n  filter(exchanges > 100) |>\n  graph_from_data_frame(directed = TRUE) |>\n  plot(vertex.size=5)\n\n\n\n\n\n\nNo isolates\n\n\n\n\n\n\n\nNo isolates\n\n\n\n\n\n\nFor alternative methods of visualizing mobility while maintaining the geographic relations, see Andrew Wheeler’s 2015 paper in Cartography and Geographic Information Science, at (behind paywall), here"
  },
  {
    "objectID": "02_TT_202202.html",
    "href": "02_TT_202202.html",
    "title": "3  Research of Board Games",
    "section": "",
    "text": "4 Introduction\nThe dataset for this Tidy Tuesday is about board games! Asier Moneva explores the following research questions: “What are the top 3 best-selling board games by game type?” and “How do board game sales relate to online user ratings?”\n\n\n5 Load packages\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nToday’s data are relational, which means there are multiple datasets (rating, details) that can be linked through some identifier or id variable or ‘key’.\n\n\n6 Import data\n\nratings <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-25/ratings.csv\")\n\n\ndetails <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-25/details.csv\")\n\n\n\n7 Explore data\nSo let’s have a quick look at the data.\n\nglimpse(ratings)\n\nRows: 21,831\nColumns: 10\n$ num           <dbl> 105, 189, 428, 72, 103, 191, 100, 3, 15, 35, 30, 182, 13~\n$ id            <dbl> 30549, 822, 13, 68448, 36218, 9209, 178900, 167791, 1733~\n$ name          <chr> \"Pandemic\", \"Carcassonne\", \"Catan\", \"7 Wonders\", \"Domini~\n$ year          <dbl> 2008, 2000, 1995, 2010, 2008, 2004, 2015, 2016, 2015, 20~\n$ rank          <dbl> 106, 190, 429, 73, 104, 192, 101, 4, 16, 36, 31, 183, 14~\n$ average       <dbl> 7.59, 7.42, 7.14, 7.74, 7.61, 7.41, 7.60, 8.42, 8.11, 7.~\n$ bayes_average <dbl> 7.487, 7.309, 6.970, 7.634, 7.499, 7.305, 7.508, 8.274, ~\n$ users_rated   <dbl> 108975, 108738, 108024, 89982, 81561, 76171, 74419, 7421~\n$ url           <chr> \"/boardgame/30549/pandemic\", \"/boardgame/822/carcassonne~\n$ thumbnail     <chr> \"https://cf.geekdo-images.com/S3ybV1LAp-8SnHIXLLjVqA__mi~\n\nglimpse(details)\n\nRows: 21,631\nColumns: 23\n$ num                     <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ~\n$ id                      <dbl> 30549, 822, 13, 68448, 36218, 9209, 178900, 16~\n$ primary                 <chr> \"Pandemic\", \"Carcassonne\", \"Catan\", \"7 Wonders~\n$ description             <chr> \"In Pandemic, several virulent diseases have b~\n$ yearpublished           <dbl> 2008, 2000, 1995, 2010, 2008, 2004, 2015, 2016~\n$ minplayers              <dbl> 2, 2, 3, 2, 2, 2, 2, 1, 2, 1, 3, 2, 1, 2, 2, 2~\n$ maxplayers              <dbl> 4, 5, 4, 7, 4, 5, 8, 5, 2, 5, 5, 4, 5, 5, 5, 4~\n$ playingtime             <dbl> 45, 45, 120, 30, 30, 60, 15, 120, 30, 150, 150~\n$ minplaytime             <dbl> 45, 30, 60, 30, 30, 30, 15, 120, 30, 30, 90, 3~\n$ maxplaytime             <dbl> 45, 45, 120, 30, 30, 60, 15, 120, 30, 150, 150~\n$ minage                  <dbl> 8, 7, 10, 10, 13, 8, 14, 12, 10, 12, 12, 10, 1~\n$ boardgamecategory       <chr> \"['Medical']\", \"['City Building', 'Medieval', ~\n$ boardgamemechanic       <chr> \"['Action Points', 'Cooperative Game', 'Hand M~\n$ boardgamefamily         <chr> \"['Components: Map (Global Scale)', 'Component~\n$ boardgameexpansion      <chr> \"['Pandemic: Gen Con 2016 Promos – Z-Force Tea~\n$ boardgameimplementation <chr> \"['Pandemic Legacy: Season 0', 'Pandemic Legac~\n$ boardgamedesigner       <chr> \"['Matt Leacock']\", \"['Klaus-Jürgen Wrede']\", ~\n$ boardgameartist         <chr> \"['Josh Cappel', 'Christian Hanisch', 'Régis M~\n$ boardgamepublisher      <chr> \"['Z-Man Games', 'Albi', 'Asmodee', 'Asmodee I~\n$ owned                   <dbl> 168364, 161299, 167733, 120466, 106956, 105748~\n$ trading                 <dbl> 2508, 1716, 2018, 1567, 2009, 930, 1110, 538, ~\n$ wanting                 <dbl> 625, 582, 485, 1010, 655, 692, 340, 2011, 924,~\n$ wishing                 <dbl> 9344, 7383, 5890, 12105, 8621, 6620, 5764, 192~\n\n\nYou see that the number of observations do not match!\nExplore whether both datasets have identical id\n\nidentical(details$id, ratings$id)\n\n[1] FALSE\n\n\nCount how many id are missing.\n\ntable(ratings$id %in% details$id)\n\n\nFALSE  TRUE \n  200 21631 \n\n\nFind which id are present in both datasets. Results not show here because of too long output.\n\nintersect(details$id, ratings$id)\n\nFind which id are absent in the dataset with the least observations\n\nsetdiff(ratings$id, details$id)\n\n  [1] 298130 286790   2415  12369  25999 304051 262554  67499  16268 236881\n [11] 102750  15391  10889   4875 165190 225303  18536 192323 143663  18704\n [21]  33125 297139   7578  32922 143459 237088 311004 195158  12624 201917\n [31]  34403  18061   5043  15049  23733 225828   6913 176633 198541  64608\n [41]   3610  29268 244268 177566  38836 275284  10544 284617 191292  96626\n [51]   8741   7752 136856  12900  30335 189615 183344  36238  39663 314125\n [61] 325678 246310 109827  19475  31412  69233   5649  98978   3814 140973\n [71] 265039  39278 188968 144378 303676  20533  13094   9860 310880 304666\n [81] 279649  40804   8249 245060 246895  10246  14698 172088   6124  20647\n [91] 264654 299690 147457  23616 258761 311990 132616 154841   8356 216360\n[101]  12169 226237 118561  49050 282410   2493   9398   9578   9512  24079\n[111]   3398 147616   7368 170390  36993  23999 316090  11674   9454  34129\n[121] 252901  10105 287304 164428  41611 232874   1550 252373   3909 145206\n[131]  36366 308870  24857 210350   6839 125585   9113 145400 239523  16830\n[141]  19304  40886  21437 328866 244528 252374  17996  22354 283849  14128\n[151] 305270 237834 137366  38524   3338   1221 319593   3830 102150  10154\n[161] 208800 214486  32324  86443 162888 221208 241611  17433   9736  18687\n[171] 104770   8426 247135 233284  11421  13918  31585   2103 210292 276641\n[181] 289055  15427  24994  47475  66276 205156   3047   8700 306072  14377\n[191]   1191 251026  19044 282389 296644 284839 144874 179124 150429  35499\n\n\nMerge data\n\ndf <- inner_join(ratings, details, by = \"id\")\n\nExplore data\n\nglimpse(df)\n\nRows: 21,631\nColumns: 32\n$ num.x                   <dbl> 105, 189, 428, 72, 103, 191, 100, 3, 15, 35, 3~\n$ id                      <dbl> 30549, 822, 13, 68448, 36218, 9209, 178900, 16~\n$ name                    <chr> \"Pandemic\", \"Carcassonne\", \"Catan\", \"7 Wonders~\n$ year                    <dbl> 2008, 2000, 1995, 2010, 2008, 2004, 2015, 2016~\n$ rank                    <dbl> 106, 190, 429, 73, 104, 192, 101, 4, 16, 36, 3~\n$ average                 <dbl> 7.59, 7.42, 7.14, 7.74, 7.61, 7.41, 7.60, 8.42~\n$ bayes_average           <dbl> 7.487, 7.309, 6.970, 7.634, 7.499, 7.305, 7.50~\n$ users_rated             <dbl> 108975, 108738, 108024, 89982, 81561, 76171, 7~\n$ url                     <chr> \"/boardgame/30549/pandemic\", \"/boardgame/822/c~\n$ thumbnail               <chr> \"https://cf.geekdo-images.com/S3ybV1LAp-8SnHIX~\n$ num.y                   <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ~\n$ primary                 <chr> \"Pandemic\", \"Carcassonne\", \"Catan\", \"7 Wonders~\n$ description             <chr> \"In Pandemic, several virulent diseases have b~\n$ yearpublished           <dbl> 2008, 2000, 1995, 2010, 2008, 2004, 2015, 2016~\n$ minplayers              <dbl> 2, 2, 3, 2, 2, 2, 2, 1, 2, 1, 3, 2, 1, 2, 2, 2~\n$ maxplayers              <dbl> 4, 5, 4, 7, 4, 5, 8, 5, 2, 5, 5, 4, 5, 5, 5, 4~\n$ playingtime             <dbl> 45, 45, 120, 30, 30, 60, 15, 120, 30, 150, 150~\n$ minplaytime             <dbl> 45, 30, 60, 30, 30, 30, 15, 120, 30, 30, 90, 3~\n$ maxplaytime             <dbl> 45, 45, 120, 30, 30, 60, 15, 120, 30, 150, 150~\n$ minage                  <dbl> 8, 7, 10, 10, 13, 8, 14, 12, 10, 12, 12, 10, 1~\n$ boardgamecategory       <chr> \"['Medical']\", \"['City Building', 'Medieval', ~\n$ boardgamemechanic       <chr> \"['Action Points', 'Cooperative Game', 'Hand M~\n$ boardgamefamily         <chr> \"['Components: Map (Global Scale)', 'Component~\n$ boardgameexpansion      <chr> \"['Pandemic: Gen Con 2016 Promos – Z-Force Tea~\n$ boardgameimplementation <chr> \"['Pandemic Legacy: Season 0', 'Pandemic Legac~\n$ boardgamedesigner       <chr> \"['Matt Leacock']\", \"['Klaus-Jürgen Wrede']\", ~\n$ boardgameartist         <chr> \"['Josh Cappel', 'Christian Hanisch', 'Régis M~\n$ boardgamepublisher      <chr> \"['Z-Man Games', 'Albi', 'Asmodee', 'Asmodee I~\n$ owned                   <dbl> 168364, 161299, 167733, 120466, 106956, 105748~\n$ trading                 <dbl> 2508, 1716, 2018, 1567, 2009, 930, 1110, 538, ~\n$ wanting                 <dbl> 625, 582, 485, 1010, 655, 692, 340, 2011, 924,~\n$ wishing                 <dbl> 9344, 7383, 5890, 12105, 8621, 6620, 5764, 192~\n\n\nLooks like there are some duplicated variables!\nNot really\n\nidentical(df$year, df$yearpublished)\n\n[1] FALSE\n\n\nWhat is the difference?\n\nwhich(df$year != df$yearpublished)\n\n [1]   209   297   881  1030  2239  3623  4089  4723 15507 16494 21623\n\n\nAh, I see!\n\ndf$year[21623]\n\n[1] 3000\n\ndf$yearpublished[21623]\n\n[1] -3000\n\n\nNope. Very different. Can these be row numbers (e.g. spreadsheet)?\n\nidentical(df$num.x, df$num.y)\n\n[1] FALSE\n\n\nAlmost, but nope.\n\nidentical(df$name, df$primary)\n\n[1] FALSE\n\nwhich(df$name != df$primary)\n\n[1]  7222 10903 12599 13233 19925\n\n\nLooks like there is some sort of syntax issue in primary\n\ndf$name[19925]\n\n[1] \"Admiral Ackbar \\\"It's a TRAP!\\\" GAME\"\n\ndf$primary[19925]\n\n[1] \"Admiral Ackbar \\\"It\\\\'s a TRAP!\\\" GAME\"\n\n\nBingo!\n\nidentical(df$playingtime, df$maxplaytime)\n\n[1] TRUE\n\n\nLet’s drop the duplicated variable\n\ndf <- df %>% \n  select(\n    - playingtime,\n    - primary\n  )\n\nLooks like we are good now! Imagine the following:\n\nWe want to buy a board game for a friend, but we don’t know which one to get.\nWe know our friend likes to play alone with his girlfriend sometimes, but some Other times he likes to invite friends over to play.\n\nWhat are the top 3 best-selling board games by game type?\n\nHow do board game sales relate to online user ratings?\nWhat are the top 3 best-selling board games by game type?\n\n\ndf <- df %>% \n  # Create new variable to define type of game based on number of players\n  mutate(minplayers_fct = case_when(\n    minplayers < 2 ~ \"single player\",\n    minplayers == 2 ~ \"two players\",\n    minplayers > 2 ~ \"multiplayer\"\n  ))\n\n\ndf %>% \n  # Select only relevant variables\n  select(\n    name,\n    minplayers_fct,\n    owned\n  ) %>% \n  group_by(minplayers_fct) %>% \n  slice_max(owned, n = 3) %>% \n  knitr::kable()\n\n\n\n\nname\nminplayers_fct\nowned\n\n\n\n\nCatan\nmultiplayer\n167733\n\n\nMunchkin\nmultiplayer\n78849\n\n\nDixit\nmultiplayer\n76535\n\n\nTerraforming Mars\nsingle player\n101872\n\n\nScythe\nsingle player\n86371\n\n\nWingspan\nsingle player\n83920\n\n\nPandemic\ntwo players\n168364\n\n\nCarcassonne\ntwo players\n161299\n\n\n7 Wonders\ntwo players\n120466\n\n\n\n\n\nWe have identified the best-sellers for each category, but best-sellers might be a product of marketing rather than an indicator of good quality. It might be the case that players buy the product because of good marketing but then find the game boring, too complicated, etc.\nHow do board game sales relate to online user ratings?\n\n\n8 Plot data\n\ndf %>% \n  ggplot(mapping = aes(\n    x = average,\n    y = owned,\n    # Examine if there are clear patterns by number of players\n    color = minplayers_fct\n  )) +\n  geom_point(alpha = .5) +\n  # There seems to be three outliers that are best-sellers and also have high \n  # ratings\n  ggrepel::geom_text_repel(\n    data = df %>% filter(owned > 150000),\n    mapping = aes(label = name),\n    color = \"black\"\n    ) +\n  scale_x_continuous(limits = c(0, 10)) +\n  scale_color_viridis_d() +\n  labs(\n    title = \"How do board game sales relate to online user ratings?\",\n    x = \"average user rating\",\n    y = \"number of\\ncopies owned\",\n    color = \"Category\"\n  ) +\n  theme_classic() +\n  theme(axis.title.y = element_text(\n    angle = 0,\n    vjust = .5\n  ))"
  }
]