---
title: "Wrangling dates-time data"
subtitle: "NSC-R Tidy Tuesday February 2022"
author: Alex Trinidad
date: "2022-02-22"
format:
    html 
---

## Introduction

The dataset for this Tidy Tuesday is about animal rescues! Alex Trinidad explores the temporal trends of animal rescues using lubridate package (Grolemund & Wickham, 2011) [@trinidad_nsc-r_nodate]

## Load packages and data

Install TT package (if necessary)

    install.packages("tidytuesdayR")
    install.packages("tidyverse")

```{r}
#| warning: false
#| echo: true
library(tidyverse)
library(lubridate)
library(tidytuesdayR)
```

Download data.

```{r}
#| warning: false
#| echo: true
mydatalist <- tidytuesdayR::tt_load("2021-06-29")
```

Data as tbl

```{r}
#| warning: false
#| echo: true
mydata <- mydatalist$animal_rescues
```

## Explore the data

```{r}
#| warning: false
#| echo: true
glimpse(mydata)
```

Do we have missing data?

```{r}
#| warning: false
#| echo: true
summary(mydata)
```

Create a unique ID

```{r}
#| warning: false
#| echo: true
mydata <- mydata |> 
  arrange(cal_year) |> 
  mutate(uid = paste0(seq(1:n()), LETTERS, letters))
```

Are there any duplicated?

```{r}
#| warning: false
#| echo: true
table(duplicated(mydata$uid))
```

Select variables of interest.

```{r}
#| warning: false
#| echo: true
mydataselection <- mydata |> 
  select(uid, date_time_of_call, type_of_incident, animal_group_parent, borough_code)
```

Show me the frequencies of different types of animal.

```{r}
#| warning: false
#| echo: true
myfreq <- mydataselection |> 
  group_by(animal_group_parent) |> 
  summarise(freq = n()) |> 
  arrange(-freq)
myfreq
```

Remove unkonwn type of animals from the dataset.

```{r}
#| warning: false
#| echo: true
mydataselection <- mydataselection |> 
  filter(!grepl("Unknown", animal_group_parent))
```

```{r}
#| warning: false
#| echo: true
myfreq <- mydataselection |> 
  group_by(animal_group_parent) |> 
  summarise(freq = n()) |> 
  arrange(-freq)

```

Merging the cat counts.

```{r}
#| warning: false
#| echo: true
mydataselection$animal_group_parent <- recode(mydataselection$animal_group_parent,
                                              "cat" = "Cat")
```

Another way to do this (Nick van Doormaal suggestion).

```{r}
#| warning: false
#| echo: true
mydataselection$animal_group_parent <- tolower(mydataselection$animal_group_parent)
```

## Working with Date-Time Data

Now we are ready to work with Data-Time Data. We want to separate the date in year, month, day, hour....

But, what variable type is the date in our data set?

```{r}
#| warning: false
#| echo: true
glimpse(mydataselection)
```

If not "date" format, transform ir

```{r}
#| warning: false
#| echo: true
mydatadate <- mydataselection |> 
  mutate(datetime = lubridate::as_datetime(date_time_of_call, 
                                   format = "%d/%m/%Y %H:%M"))
# # Non-lubridate Alternative
# mydatadate <- mydataselection |> 
#   mutate(datetime = strptime(date_time_of_call,
#                          format ="%d/%m/%Y %H:%M", 
#                          tz = "Europe/London"))
# OlsonNames() # function for for the tz
```

Create separate variables for `day`, `month`, `year`, `hour`, `minute`, and `date`.

```{r}
#| warning: false
#| echo: true
mydatadate <- mydataselection |> 
  mutate(datetime = as_datetime(date_time_of_call,
                            format ="%d/%m/%Y %H:%M"),
         day = day(datetime),
         month = month(datetime),
         year = year(datetime),
         hour = hour(datetime),
         minute = minute(datetime),
         date = as_date(datetime))

head(mydatadate[, 6:12])
```

How many cases do we have now per day?

```{r}
#| warning: false
#| echo: true
caseperday <- mydatadate |> 
  group_by(date) |> 
  summarise(resc_counts = n())
```

Plot trends of cases

```{r}
#| warning: false
#| echo: true
#| label: trend_cases
#| fig-cap: "Trends of cases"
#| cap-location: margin
ggplot(data = caseperday, 
       aes(
         x = date,
         y = resc_counts
       )) +
  geom_line()
```

And how many cases do we have per year?

```{r}
#| warning: false
#| echo: true
#| label: howmany-cases
#| fig-cap: "How many cases per year"
#| cap-location: margin
#| fig-width: 6
#| fig-height: 4

mydatadate |> 
  group_by(year) %>% 
  summarise(resc_counts = n()) |> 
  ggplot() +
  aes(
    x = year,
    y = resc_counts
  ) + 
  geom_line()
```

Is there a rescue every day?

```{r}
#| warning: false
#| echo: true
perday <- mydatadate |> 
          group_by(date) |> 
          summarise(resc_counts = n())
```

How many days are (more or less) in those years?

```{r}
#| warning: false
#| echo: true
length(unique(mydatadate$year)) * 365
```

How can I know the days that are missing? Create for this a data set with all the days

```{r}
#| warning: false
#| echo: true
compdates <- data.frame(date = c(seq(ymd('2009-01-01'), 
                                     ymd('2021-12-31'), by = '1 day')))
```

How can I know the days that are missing? Create for this a data set with all the days 

```{r}
#| warning: false
#| echo: true
compdates <- data.frame(date = c(seq(ymd('2009-01-01'), 
                                     ymd('2021-12-31'), by = '1 day')))
```


Save missing dates
```{r}
#| warning: false
#| echo: true
missingdates <- anti_join(compdates, perday)
```

Add missing dates to our data set.
```
fulldates <- rbind(perday, missingdates) #
```

This will give an error because we need the same arguments We need the same arguments

```{r}
#| warning: false
#| echo: true
missingdates <- missingdates %>% 
  mutate(resc_counts = vector(mode = "numeric", length = length(.)))
```

Add now the missing dates to our data set
```{r}
#| warning: false
#| echo: true
fulldates <- rbind(perday, missingdates)
```

Are any date duplicated?

```{r}
#| warning: false
#| echo: true
table(duplicated(fulldates$date))
```

Wim Bernasco's suggestion instead of using `anti_join()` and `rbind()`, use `left_join`.


```{r}
#| warning: false
#| echo: true
fulldates <- left_join(compdates, perday, by = "date") %>% 
  replace(is.na(.), 0)
```

Separate the date ymd

```{r}
#| warning: false
#| echo: true
fulldates <- fulldates %>% 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```

What week of the year did it happen?

```{r}
#| warning: false
#| echo: true
fulldates <- fulldates %>% 
  mutate(week = week(date))
```

What day of the week did it happen?
```{r}
#| warning: false
#| echo: true
fulldates <- fulldates %>% 
  mutate(weekday = wday(date, label = TRUE))
```

# Plotting results

Plot by week.

```{r}
#| warning: false
#| echo: true
byweek <- fulldates %>% 
  group_by(year, week) %>% 
  summarise(resc_counts = sum(resc_counts))
```

```{r}
#| warning: false
#| echo: true
ggplot(data = byweek) +
  geom_line(aes(x = week, y = resc_counts), size = 1) +
  facet_wrap(vars(year),scales = "free_x") 
```

Plot Trends by Type of Animal, so accounting the type of animals.

First cat

```{r}
#| warning: false
#| echo: true
cat <- mydatadate %>% 
  filter(animal_group_parent == "cat") %>%  
  group_by(date, animal_group_parent) %>% 
  summarise(resc_counts = n())

mdatecat <- anti_join(compdates, cat)

fullcat <- rbind(cat, mdatecat) %>% 
  mutate(animal_group_parent = "cat") %>% 
  replace(is.na(.),0)
```
Dog now.

```{r}
#| warning: false
#| echo: true
dog <- mydatadate %>% 
  filter(animal_group_parent == "dog") %>%  
  group_by(date, animal_group_parent) %>% 
  summarise(resc_counts = n())

mdatedog <- anti_join(compdates, dog)

fulldog <- rbind(dog, mdatedog) %>% 
  mutate(animal_group_parent = "dog") %>% 
  replace(is.na(.),0)

```
Bird now. 

```{r}
#| warning: false
#| echo: true
bird <- mydatadate %>% 
  filter(animal_group_parent == "bird") %>%  
  group_by(date, animal_group_parent) %>% 
  summarise(resc_counts = n())

mdatebird <- anti_join(compdates, bird)

fullbird <- rbind(bird, mdatebird) %>% 
  mutate(animal_group_parent = "bird") %>% 
  replace(is.na(.),0)
```

Three datasets together. 

```{r}
#| warning: false
#| echo: true
myfulldata <- rbind(fullcat,fulldog, fullbird)
```


Dates by components
```{r}
#| warning: false
#| echo: true
myfulldata <- myfulldata %>% 
  mutate(day = day(date),
         month = month(date, label = TRUE),
         year = year(date),
         week = week(date),
         weekday = wday(date, label = TRUE))
```



By day of the week
```{r}
#| warning: false
#| echo: true
bywday <- myfulldata %>% 
  group_by(year, weekday, animal_group_parent) %>% 
  summarise(resc_counts = sum(resc_counts))
```

What levels are in weekday?
```{r}
#| warning: false
#| echo: true
levels(bywday$weekday)
```

Order these levels.
```{r}
#| warning: false
#| echo: true
levelorder <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
```


```{r}
#| warning: false
#| echo: true
ggplot(data = bywday) +
  geom_line(aes(x = factor(weekday, level = levelorder), 
                y = resc_counts, 
                group = animal_group_parent, 
                color = animal_group_parent), size = 1) +
  facet_wrap(vars(year), scales = "free_x")+
  labs(
    title = "Animal Rescue per Weekday",
    x = "Weekday",
    y = "Count of Rescues",
    color = "Animal"
  )
```

By week of the year
```{r}
#| warning: false
#| echo: true
myfulldata <- myfulldata %>% 
  mutate(weekyear = paste0(week,month,day))
```


```{r}
#| warning: false
#| echo: true
byweek <- myfulldata %>% 
  group_by(year, weekyear, animal_group_parent) %>% 
  summarise(resc_counts = sum(resc_counts))
```

Plot it.
```{r}
#| warning: false
#| echo: true
ggplot(data = byweek) +
  geom_line(aes(x = weekyear, 
                y = resc_counts, 
                group = animal_group_parent, 
                color = animal_group_parent), size = 1) +
  facet_wrap(vars(year), scales = "free_x") +
  labs(
    title = "Animal Rescue per Week",
    x = "Week",
    y = "Count of Rescues",
    color = "Animal"
  )
```


By month of the year
```{r}
#| warning: false
#| echo: true
bymonth <- myfulldata %>% 
  group_by(year, month, animal_group_parent) %>% 
  summarise(resc_counts = sum(resc_counts))
```

```{r}
#| warning: false
#| echo: true
ggplot(data = bymonth) +
  geom_line(aes(x = month, 
                y = resc_counts, 
                group = animal_group_parent, 
                color = animal_group_parent), size = 1) +
  facet_wrap(vars(year), scales = "free_x") +
  labs(
    title = "Animal Rescue per Month",
    x = "Month",
    y = "Count of Rescues",
    color = "Animal"
  )
```

By year
```{r}
#| warning: false
#| echo: true
byyear <- myfulldata %>% 
  group_by(year,animal_group_parent) %>% 
  summarise(resc_counts = sum(resc_counts))
```


```{r}
#| warning: false
#| echo: true
ggplot(data = byyear) +
  geom_line(aes(x = year, 
                y = resc_counts, 
                group = animal_group_parent, 
                color = animal_group_parent), size = 1) +
  labs(
    title = "Animal Rescue per Year",
    x = "Year",
    y = "Count of Rescues",
    color = "Animal"
  )
```

# References
