{
  "hash": "57c1d979fb17169c8c34869827b8d7ff",
  "result": {
    "markdown": "---\ntitle: \"Wrangling dates-time data\"\nsubtitle: \"NSC-R Tidy Tuesday February 2022\"\nauthor: Alex Trinidad\ndate: \"2022-02-22\"\nformat:\n    html \n---\n\n\n## Introduction\n\nThe dataset for this Tidy Tuesday is about animal rescues! Alex Trinidad explores the temporal trends of animal rescues using lubridate package (Grolemund & Wickham, 2011) [@trinidad_nsc-r_nodate]\n\n## Load packages and data\n\nInstall TT package (if necessary)\n\n```\ninstall.packages(\"tidytuesdayR\")\ninstall.packages(\"tidyverse\")\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(tidytuesdayR)\n```\n:::\n\n\nDownload data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydatalist <- tidytuesdayR::tt_load(\"2021-06-29\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDownloading file 1 of 1: `animal_rescues.csv`\n```\n:::\n:::\n\n\nData as tbl\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- mydatalist$animal_rescues\n```\n:::\n\n\n## Explore the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 7,544\nColumns: 31\n$ incident_number               <dbl> 139091, 275091, 2075091, 2872091, 355309~\n$ date_time_of_call             <chr> \"01/01/2009 03:01\", \"01/01/2009 08:51\", ~\n$ cal_year                      <dbl> 2009, 2009, 2009, 2009, 2009, 2009, 2009~\n$ fin_year                      <chr> \"2008/09\", \"2008/09\", \"2008/09\", \"2008/0~\n$ type_of_incident              <chr> \"Special Service\", \"Special Service\", \"S~\n$ pump_count                    <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", ~\n$ pump_hours_total              <chr> \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", ~\n$ hourly_notional_cost          <dbl> 255, 255, 255, 255, 255, 255, 255, 255, ~\n$ incident_notional_cost        <chr> \"510\", \"255\", \"255\", \"255\", \"255\", \"255\"~\n$ final_description             <chr> \"Redacted\", \"Redacted\", \"Redacted\", \"Red~\n$ animal_group_parent           <chr> \"Dog\", \"Fox\", \"Dog\", \"Horse\", \"Rabbit\", ~\n$ originof_call                 <chr> \"Person (land line)\", \"Person (land line~\n$ property_type                 <chr> \"House - single occupancy\", \"Railings\", ~\n$ property_category             <chr> \"Dwelling\", \"Outdoor Structure\", \"Outdoo~\n$ special_service_type_category <chr> \"Other animal assistance\", \"Other animal~\n$ special_service_type          <chr> \"Animal assistance involving livestock -~\n$ ward_code                     <chr> \"E05011467\", \"E05000169\", \"E05000558\", \"~\n$ ward                          <chr> \"Crystal Palace & Upper Norwood\", \"Woods~\n$ borough_code                  <chr> \"E09000008\", \"E09000008\", \"E09000029\", \"~\n$ borough                       <chr> \"Croydon\", \"Croydon\", \"Sutton\", \"Hilling~\n$ stn_ground_name               <chr> \"Norbury\", \"Woodside\", \"Wallington\", \"Ru~\n$ uprn                          <chr> \"NULL\", \"NULL\", \"NULL\", \"1.00021E+11\", \"~\n$ street                        <chr> \"Waddington Way\", \"Grasmere Road\", \"Mill~\n$ usrn                          <chr> \"20500146\", \"NULL\", \"NULL\", \"21401484\", ~\n$ postcode_district             <chr> \"SE19\", \"SE25\", \"SM5\", \"UB9\", \"RM3\", \"RM~\n$ easting_m                     <chr> \"NULL\", \"534785\", \"528041\", \"504689\", \"N~\n$ northing_m                    <chr> \"NULL\", \"167546\", \"164923\", \"190685\", \"N~\n$ easting_rounded               <dbl> 532350, 534750, 528050, 504650, 554650, ~\n$ northing_rounded              <dbl> 170050, 167550, 164950, 190650, 192350, ~\n$ latitude                      <chr> \"NULL\", \"51.39095371\", \"51.36894086\", \"5~\n$ longitude                     <chr> \"NULL\", \"-0.064166887\", \"-0.161985191\", ~\n```\n:::\n:::\n\n\nDo we have missing data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n incident_number     date_time_of_call     cal_year      fin_year        \n Min.   :     4149   Length:7544        Min.   :2009   Length:7544       \n 1st Qu.: 49306118   Class :character   1st Qu.:2012   Class :character  \n Median : 89438626   Mode  :character   Median :2015   Mode  :character  \n Mean   : 91854662                      Mean   :2015                     \n 3rd Qu.:131567118                      3rd Qu.:2018                     \n Max.   :233284091                      Max.   :2021                     \n NA's   :3478                                                            \n type_of_incident    pump_count        pump_hours_total   hourly_notional_cost\n Length:7544        Length:7544        Length:7544        Min.   :255.0       \n Class :character   Class :character   Class :character   1st Qu.:260.0       \n Mode  :character   Mode  :character   Mode  :character   Median :298.0       \n                                                          Mean   :301.3       \n                                                          3rd Qu.:333.0       \n                                                          Max.   :352.0       \n                                                                              \n incident_notional_cost final_description  animal_group_parent\n Length:7544            Length:7544        Length:7544        \n Class :character       Class :character   Class :character   \n Mode  :character       Mode  :character   Mode  :character   \n                                                              \n                                                              \n                                                              \n                                                              \n originof_call      property_type      property_category \n Length:7544        Length:7544        Length:7544       \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n special_service_type_category special_service_type  ward_code        \n Length:7544                   Length:7544          Length:7544       \n Class :character              Class :character     Class :character  \n Mode  :character              Mode  :character     Mode  :character  \n                                                                      \n                                                                      \n                                                                      \n                                                                      \n     ward           borough_code         borough          stn_ground_name   \n Length:7544        Length:7544        Length:7544        Length:7544       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n     uprn              street              usrn           postcode_district \n Length:7544        Length:7544        Length:7544        Length:7544       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n  easting_m          northing_m        easting_rounded  northing_rounded\n Length:7544        Length:7544        Min.   :500050   Min.   :157050  \n Class :character   Class :character   1st Qu.:524750   1st Qu.:175150  \n Mode  :character   Mode  :character   Median :531650   Median :181250  \n                                       Mean   :531243   Mean   :180725  \n                                       3rd Qu.:537750   3rd Qu.:186750  \n                                       Max.   :571350   Max.   :200750  \n                                                                        \n   latitude          longitude        \n Length:7544        Length:7544       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n:::\n\n\nCreate a unique ID\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- mydata %>% \n  arrange(cal_year) %>% \n  mutate(uid = paste0(seq(1:n()), LETTERS, letters))\n```\n:::\n\n\nAre there any duplicated?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(duplicated(mydata$uid))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE \n 7544 \n```\n:::\n:::\n\n\nSelect variables of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydataselection <- mydata %>% \n  select(uid, date_time_of_call, type_of_incident, animal_group_parent, borough_code)\n```\n:::\n\n\nShow me the frequencies of different types of animal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfreq <- mydataselection %>% \n  group_by(animal_group_parent) %>% \n  summarise(freq = n()) %>% \n  arrange(-freq)\nmyfreq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 x 2\n   animal_group_parent               freq\n   <chr>                            <int>\n 1 Cat                               3649\n 2 Bird                              1530\n 3 Dog                               1194\n 4 Fox                                349\n 5 Horse                              193\n 6 Unknown - Domestic Animal Or Pet   191\n 7 Deer                               130\n 8 Unknown - Wild Animal               89\n 9 Squirrel                            65\n10 Unknown - Heavy Livestock Animal    49\n# ... with 18 more rows\n```\n:::\n:::\n\n\nRemove unkonwn type of animals from the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydataselection <- mydataselection %>% \n  filter(!grepl(\"Unknown\", animal_group_parent))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfreq <- mydataselection %>% \n  group_by(animal_group_parent) %>% \n  summarise(freq = n()) %>% \n  arrange(-freq)\n```\n:::\n\n\nMerging the cat counts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydataselection$animal_group_parent <- recode(mydataselection$animal_group_parent,\n                                              \"cat\" = \"Cat\")\n```\n:::\n\n\nAnother way to do this (Nick van Doormaal suggestion).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydataselection$animal_group_parent <- tolower(mydataselection$animal_group_parent)\n```\n:::\n\n\n## Working with Date-Time Data\n\nNow we are ready to work with Data-Time Data. We want to separate the date in year, month, day, hour....\n\nBut, what variable type is the date in our data set?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mydataselection)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 7,211\nColumns: 5\n$ uid                 <chr> \"1Aa\", \"2Bb\", \"3Cc\", \"4Dd\", \"5Ee\", \"7Gg\", \"8Hh\", \"~\n$ date_time_of_call   <chr> \"01/01/2009 03:01\", \"01/01/2009 08:51\", \"04/01/200~\n$ type_of_incident    <chr> \"Special Service\", \"Special Service\", \"Special Ser~\n$ animal_group_parent <chr> \"dog\", \"fox\", \"dog\", \"horse\", \"rabbit\", \"dog\", \"do~\n$ borough_code        <chr> \"E09000008\", \"E09000008\", \"E09000029\", \"E09000017\"~\n```\n:::\n:::\n\n\nIf not \"date\" format, transform ir\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydatadate <- mydataselection %>% \n  mutate(datetime = lubridate::as_datetime(date_time_of_call, \n                                   format = \"%d/%m/%Y %H:%M\"))\n# # Non-lubridate Alternative\n# mydatadate <- mydataselection %>% \n#   mutate(datetime = strptime(date_time_of_call,\n#                          format =\"%d/%m/%Y %H:%M\", \n#                          tz = \"Europe/London\"))\n# OlsonNames() # function for for the tz\n```\n:::\n\n\nCreate separate variables for `day`, `month`, `year`, `hour`, `minute`, and `date`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydatadate <- mydataselection %>% \n  mutate(datetime = as_datetime(date_time_of_call,\n                            format =\"%d/%m/%Y %H:%M\"),\n         day = day(datetime),\n         month = month(datetime),\n         year = year(datetime),\n         hour = hour(datetime),\n         minute = minute(datetime),\n         date = as_date(datetime))\n\nhead(mydatadate[, 6:12])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 7\n  datetime              day month  year  hour minute date      \n  <dttm>              <int> <dbl> <dbl> <int>  <int> <date>    \n1 2009-01-01 03:01:00     1     1  2009     3      1 2009-01-01\n2 2009-01-01 08:51:00     1     1  2009     8     51 2009-01-01\n3 2009-01-04 10:07:00     4     1  2009    10      7 2009-01-04\n4 2009-01-05 12:27:00     5     1  2009    12     27 2009-01-05\n5 2009-01-06 15:23:00     6     1  2009    15     23 2009-01-06\n6 2009-01-07 06:29:00     7     1  2009     6     29 2009-01-07\n```\n:::\n:::\n\n\nHow many cases do we have now per day?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncaseperday <- mydatadate %>% \n  group_by(date) %>% \n  summarise(resc_counts = n())\n```\n:::\n\n\nPlot trends of cases\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nggplot(data = caseperday, \n       aes(\n         x = date,\n         y = resc_counts\n       )) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![Trends of cases](03_TT_202202_files/figure-html/trend_cases-1.png){width=672}\n:::\n:::\n\n\nAnd how many cases do we have per year?\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nmydatadate %>% \n  group_by(year) %>% \n  summarise(resc_counts = n()) %>% \n  ggplot() +\n  aes(\n    x = year,\n    y = resc_counts\n  ) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![How many cases per year](03_TT_202202_files/figure-html/howmany-cases-1.png){width=576}\n:::\n:::\n\n\nIs there a rescue every day?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperday <- mydatadate %>% \n          group_by(date) %>% \n          summarise(resc_counts = n())\n```\n:::\n\n\nHow many days are (more or less) in those years?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(mydatadate$year)) * 365\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4745\n```\n:::\n:::\n\n\nHow can I know the days that are missing? Create for this a data set with all the days\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompdates <- data.frame(date = c(seq(ymd('2009-01-01'), \n                                     ymd('2021-12-31'), by = '1 day')))\n```\n:::\n\n\nSave missing dates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissingdates <- anti_join(compdates, perday)\n```\n:::\n\n\nAdd missing dates to our data set.\n\n    fulldates <- rbind(perday, missingdates) #\n\nThis will give an error because we need the same arguments We need the same arguments\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissingdates <- missingdates %>% \n  mutate(resc_counts = vector(mode = \"numeric\", length = length(.)))\n```\n:::\n\n\nAdd now the missing dates to our data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfulldates <- rbind(perday, missingdates)\n```\n:::\n\n\nAre any date duplicated?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(duplicated(fulldates$date))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE \n 4748 \n```\n:::\n:::\n\n\nWim Bernasco's suggestion instead of using `anti_join()` and `rbind()`, use `left_join`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfulldates <- left_join(compdates, perday, by = \"date\") %>% \n  replace(is.na(.), 0)\n```\n:::\n\n\nSeparate the date ymd\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfulldates <- fulldates %>% \n  mutate(year = year(date),\n         month = month(date),\n         day = day(date))\n```\n:::\n\n\nWhat week of the year did it happen?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfulldates <- fulldates %>% \n  mutate(week = week(date))\n```\n:::\n\n\nWhat day of the week did it happen?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfulldates <- fulldates %>% \n  mutate(weekday = wday(date, label = TRUE))\n```\n:::\n\n\n# Plotting results\n\nPlot by week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbyweek <- fulldates %>% \n  group_by(year, week) %>% \n  summarise(resc_counts = sum(resc_counts))\n```\n:::\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nggplot(data = byweek) +\n  geom_line(aes(x = week, y = resc_counts), size = 1) +\n  facet_wrap(vars(year),scales = \"free_x\") \n```\n\n::: {.cell-output-display}\n![How many cases every week](03_TT_202202_files/figure-html/week_cases-1.png){width=576}\n:::\n:::\n\n\nPlot Trends by Type of Animal, so accounting the type of animals.\n\nFirst cat\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat <- mydatadate %>% \n  filter(animal_group_parent == \"cat\") %>%  \n  group_by(date, animal_group_parent) %>% \n  summarise(resc_counts = n())\n\nmdatecat <- anti_join(compdates, cat)\n\nfullcat <- rbind(cat, mdatecat) %>% \n  mutate(animal_group_parent = \"cat\") %>% \n  replace(is.na(.),0)\n```\n:::\n\n\nDog now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog <- mydatadate %>% \n  filter(animal_group_parent == \"dog\") %>%  \n  group_by(date, animal_group_parent) %>% \n  summarise(resc_counts = n())\n\nmdatedog <- anti_join(compdates, dog)\n\nfulldog <- rbind(dog, mdatedog) %>% \n  mutate(animal_group_parent = \"dog\") %>% \n  replace(is.na(.),0)\n```\n:::\n\n\nBird now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbird <- mydatadate %>% \n  filter(animal_group_parent == \"bird\") %>%  \n  group_by(date, animal_group_parent) %>% \n  summarise(resc_counts = n())\n\nmdatebird <- anti_join(compdates, bird)\n\nfullbird <- rbind(bird, mdatebird) %>% \n  mutate(animal_group_parent = \"bird\") %>% \n  replace(is.na(.),0)\n```\n:::\n\n\nThree datasets together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfulldata <- rbind(fullcat,fulldog, fullbird)\n```\n:::\n\n\nDates by components\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfulldata <- myfulldata %>% \n  mutate(day = day(date),\n         month = month(date, label = TRUE),\n         year = year(date),\n         week = week(date),\n         weekday = wday(date, label = TRUE))\n```\n:::\n\n\nBy day of the week\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbywday <- myfulldata %>% \n  group_by(year, weekday, animal_group_parent) %>% \n  summarise(resc_counts = sum(resc_counts))\n```\n:::\n\n\nWhat levels are in weekday?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(bywday$weekday)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"zo\" \"ma\" \"di\" \"wo\" \"do\" \"vr\" \"za\"\n```\n:::\n:::\n\n\nOrder these levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevelorder <- c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")\n```\n:::\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nggplot(data = bywday) +\n  geom_line(aes(x = factor(weekday, level = levelorder), \n                y = resc_counts, \n                group = animal_group_parent, \n                color = animal_group_parent), size = 1) +\n  facet_wrap(vars(year), scales = \"free_x\")+\n  labs(\n    title = \"Animal Rescue per Weekday\",\n    x = \"Weekday\",\n    y = \"Count of Rescues\",\n    color = \"Animal\"\n  )\n```\n\n::: {.cell-output-display}\n![Animal Rescue per weekday](03_TT_202202_files/figure-html/Animalrescue_weekday-1.png){width=576}\n:::\n:::\n\n\nBy week of the year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfulldata <- myfulldata %>% \n  mutate(weekyear = paste0(week,month,day))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbyweek <- myfulldata %>% \n  group_by(year, weekyear, animal_group_parent) %>% \n  summarise(resc_counts = sum(resc_counts))\n```\n:::\n\n\nPlot it.\n\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nggplot(data = byweek) +\n  geom_line(aes(x = weekyear, \n                y = resc_counts, \n                group = animal_group_parent, \n                color = animal_group_parent), size = 1) +\n  facet_wrap(vars(year), scales = \"free_x\") +\n  labs(\n    title = \"Animal Rescue per Week\",\n    x = \"Week\",\n    y = \"Count of Rescues\",\n    color = \"Animal\"\n  )\n```\n\n::: {.cell-output-display}\n![Animal Rescue per weekyear](03_TT_202202_files/figure-html/Animalrescue_weekyear-1.png){width=576}\n:::\n:::\n\n\nBy month of the year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbymonth <- myfulldata %>% \n  group_by(year, month, animal_group_parent) %>% \n  summarise(resc_counts = sum(resc_counts))\n```\n:::\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nggplot(data = bymonth) +\n  geom_line(aes(x = month, \n                y = resc_counts, \n                group = animal_group_parent, \n                color = animal_group_parent), size = 1) +\n  facet_wrap(vars(year), scales = \"free_x\") +\n  labs(\n    title = \"Animal Rescue per Month\",\n    x = \"Month\",\n    y = \"Count of Rescues\",\n    color = \"Animal\"\n  )\n```\n\n::: {.cell-output-display}\n![Animal Rescue per Month](03_TT_202202_files/figure-html/Animalrescue_monty-1.png){width=576}\n:::\n:::\n\n\nBy year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbyyear <- myfulldata %>% \n  group_by(year,animal_group_parent) %>% \n  summarise(resc_counts = sum(resc_counts))\n```\n:::\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\nggplot(data = byyear) +\n  geom_line(aes(x = year, \n                y = resc_counts, \n                group = animal_group_parent, \n                color = animal_group_parent), size = 1) +\n  labs(\n    title = \"Animal Rescue per Year\",\n    x = \"Year\",\n    y = \"Count of Rescues\",\n    color = \"Animal\"\n  )\n```\n\n::: {.cell-output-display}\n![Animal Rescue per Year](03_TT_202202_files/figure-html/Animalrescue_year-1.png){width=576}\n:::\n:::\n\n\n# References\n\n\n",
    "supporting": [
      "03_TT_202202_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}